# -*- coding: utf-8 -*-
"""Summary_11_111124.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UJ1VhBs_qdVaaqZNHLQpoApFQGPslLNp

## Python fundamentals: Домашнее задание 20 (Python)

### 1.
"""

# 1. Напишите функцию merge_dicts, которая принимает произвольное количество словарей в качестве аргументов и
# возвращает новый словарь, объединяющий все входные словари. Если ключи повторяются, значения должны быть объединены в список.
# Функция должна использовать аргумент **kwargs для принятия произвольного числа аргументов словаря.

dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}
dict3 = {'c': 5, 'd': 6}


def merge_dicts(*args, **kwargs):
    print(args)
    print(kwargs)
    ''' Function for u study.

    This function unifies the dictionaries in
    a very strange way. '''
    common_diction = {}
    for el in kwargs.values():
        for key, value in el.items():
            if key in common_diction:
                common_diction[key].append(value)
            else:
                common_diction[key] = [value]

    return common_diction


# result = merge_dicts(a=dict1, b=dict2, c=dict3)
result = merge_dicts(dict1, dict2, dict3)
print(result)

def merge_dicts(*args):
    merged_dict = {}
    for dict in args:
        for key, value in dict.items():
            if key in merged_dict:
                merged_dict[key] = merged_dict[key] + [value]  # работает, но каждый раз пересоздает список
            else:
                merged_dict[key] = [value]
    return merged_dict


print(merge_dicts({'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6}))

def merge_dicts(**kwargs):
    res_dict = {}  # Обычный словарь

    for key, value in kwargs.items():  # Перебираем переданные словари
        for k, v in value.items():  # Перебираем ключи и значения внутри словаря
            res_dict.setdefault(k, []).append(v)  # Добавляем в список

    return res_dict


result = merge_dicts(
    dict_1={'a': 1, 'b': 2},
    dict_2={'b': 3, 'c': 4},
    dict_3={'c': 5, 'd': 6})

print(result)

"""### 2."""

# 2. Напишите программу, которая принимает строку от пользователя и подсчитывает
# количество уникальных символов в этой строке. Создайте функцию count_unique_chars,
# которая принимает строку и возвращает количество уникальных символов. Выведите
# результат на экран.


def count_unique_chars(smth):
    unique_chars = len(set(smth))
    return unique_chars

smth = input('Enter a string: ')
print(f'There are {count_unique_chars(smth)} unique characters in the {smth}.')

"""### 3."""

# 3. Напишите программу, которая создает словарь, содержащий информацию о студентах и их
# оценках. Ключами словаря являются имена студентов, а значениями - списки оценок.
# Создайте функцию calculate_average_grade, которая принимает словарь с оценками
# студентов и вычисляет средний балл для каждого студента. Функция должна возвращать
# новый словарь, в котором ключами являются имена студентов, а значениями - их средний
# балл. Выведите результат на экран.
students = {
 'Alice': [85, 90, 92],
 'Bob': [78, 80, 84],
 'Carol': [92, 88, 95]
}


def calculate_average_grade(students):
    avg_grade = {}
    for key, value in students.items():
        avg_grade[key] = round(sum(value) / len(value), 1)
    return avg_grade


result = calculate_average_grade(students)

print(f'Average grades: ')
for key, value in result.items():
    print(f'\t{key}: {value}')

"""## Python fundamentals: Домашнее задание 21 (Python)

### 1.
Напишите программу, которая подсчитывает количество вхождений каждого слова в тексте и выводит на экран наиболее часто встречающиеся слова. Для решения задачи используйте класс Counter из модуля collections. Создайте функцию count_words, которая принимает текст в качестве аргумента и возвращает словарь с количеством вхождений каждого слова. Выведите наиболее часто встречающиеся слова и их количество.


Пример вывода:

Введенный текст: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sed lacinia est.

sed: 2

Lorem: 1
"""

text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sed lacinia est."
from collections import Counter

def count_words(text):
    words = text.lower().split()
    my_counter = Counter(words)
    return my_counter


text = text.replace(".", " ").replace(",", " ").replace("?", " ").replace("!", " ")
my_counter = count_words(text)
print(my_counter)

# # Способ проще
# print(my_counter.most_common(2))

print(list(my_counter.items()))

# sorted_my_counter = sorted(my_counter.items(), key=lambda x: (x[1]), reverse=True)
sorted_my_counter = sorted(my_counter.items(), key=lambda x: (-x[1]))
top2_words = sorted_my_counter[:2]

print(top2_words)

from collections import Counter

text = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sed lacinia est.'


def count_words(text):
    clean_text = [word.strip('.,!?()[]{}":;') for word in text.lower().split()]
    my_counter = Counter(clean_text)
    max_repeat = max(my_counter.values())
    for key, value in my_counter.items():
        if value == max_repeat:
            print(key, value)


count_words(text)

from collections import Counter
usrstr = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sed lacinia est."
def count_words(text):
    text = text.lower()
    for symbol in text:
        if not (symbol.isnumeric() or symbol.isspace() or symbol.isalnum()):
            text = text.replace(symbol, "")
    x = Counter(text.split())
    return x
print(count_words(usrstr))

from collections import Counter

def count_words(s):
    s = s.lower().split() # Приводим текст к нижнему регистру и разбиваем на слова
    return dict(Counter(s).most_common(2))

user_str = input('Введенный текст: ')
print(count_words(user_str))

"""### 2.
Напишите программу, которая создает именованный кортеж Person для хранения информации о человеке, включающий поля name, age и city. Создайте список объектов Person и выведите информацию о каждом человеке на экран.


Пример вывода:


Name: Alice, Age: 25, City: New York

Name: Bob, Age: 30, City: London

Name: Carol, Age: 35, City: Paris
"""

from collections import namedtuple

Person = namedtuple('Person', ['name', 'age', 'city'])


def display_people(people):
    for person in people:
        print(f'Name: {person.name}, Age: {person.age}, City: {person.city}')


people = [
    Person(name='Alice', age=25, city='New York'),
    Person(name='Bob', age=30, city='London'),
    Person(name='Carol', age=35, city='Paris')
]

display_people(people)

"""### 3.
Напишите программу, которая принимает словарь от пользователя и ключ, и возвращает значение для указанного ключа с использованием метода get или setdefault. Создайте функцию get_value_from_dict, которая принимает словарь и ключ в качестве аргументов, и возвращает значение для указанного ключа, используя метод get или setdefault в зависимости от выбранного варианта. Выведите полученное значение на экран.


Пример словаря:

my_dict = {'apple': 5, 'banana': 6, 'cherry': 7}


Пример вывода:


Введите ключ для поиска: banana

Использовать метод get (y/n)? y

Значение для ключа 'banana': 6
"""

my_dict = {'apple': 5, 'banana': 6, 'cherry': 7}

def get_value_from_dict(dict):
    your_key = input('\nВведите ключ для поиска: ')
    get_setdefault = input("Для спользования get() введите 'g', для setdefault() введите 's': ")
    if get_setdefault == 'g':
        print(f"\nЗначение для ключа '{your_key}': {dict.get(your_key)}")
    elif get_setdefault == 's':
        print(f"\nЗначение для ключа '{your_key}': {dict.setdefault(your_key)}")
    else:
        print("\nОшибка ввода, попробуйте заново!", ), {get_value_from_dict(my_dict)}

get_value_from_dict(my_dict)
print(my_dict)

my_dict = {'apple': 5, 'banana': 6, 'cherry': 7}


def get_value(my_dict, key, use_method_get=True):
    if use_method_get:
        return my_dict.get(key)
    else:
        return my_dict.setdefault(key, f"The key is missing. Be careful, '{key}' was added in list.")



user_key = input("Enter a key for searching: ")
use_method_get = input("Using method 'get' (y/n)? ").strip().lower()

if use_method_get == 'y':
    value = get_value(my_dict, user_key, use_method_get=True)
else:
    value = get_value(my_dict, user_key, use_method_get=False)

# if value:
    # print(value / 80)

print(f"\n{user_key}'s value: {value}")
print(my_dict)

"""## Python fundamentals: Домашнее задание 22 (Python)

### 1.
Напишите программу, которая открывает файл, считывает из него два числа и выполняет операцию их деления. Если число отрицательное, выбросите исключение ValueError с сообщением "Число должно быть положительным". Обработайте исключение и выведите соответствующее сообщение.
"""

import os
# 1
file_name = 'nums2divide.tmp'
nums = [2, 5]

def divide_numbers(file_path, nums):
    try:
        with open(file_path, 'w') as file:
            if len(nums) != 2:
                raise ValueError("No more, no less than two numbers")
            elif not all(isinstance(i, (int, float)) for i in nums):
                raise TypeError("Numbers must be integers or floats")
            else:
                for i in nums:
                    file.write(str(i) + '\n')

        with open(file_path, 'r') as file:
            num1, num2 = map(float, file.read().split())
            if num1 < 0 or num2 < 0:
                raise ValueError("Num should be positive")
            print(f"Result: {num1 / num2}")

    except IOError as e:
        print(f"Error while creating file: {e}")
    except FileNotFoundError:
        print(f'{file_path} {FileNotFoundError.__doc__}')
    except ValueError as e:
        print(e)
    except ZeroDivisionError:
        print(ZeroDivisionError.__doc__)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

    finally:
        try:
            os.remove(file_path)
        except OSError as e:
            print(f"Error while deleting file: {e}\nDelete file manually if necessary.")


divide_numbers(file_name, nums)

# 1.

def divide_nums(data):
    #Примечание: В задаче ничего не написано о закрытии файла, поэтому использована конструкция with open...
    with open(data, "r") as file:
        a, b = map(int, file.readline().split(","))
        if a < 0 or b < 0:
            raise ValueError("Number should be higher than 0")
        result = a / b
        return result

print(divide_nums("numbers.txt"))

"""### 2.
Напишите программу, которая открывает файл, считывает его содержимое и выполняет операции над числами в файле. Обработайте возможные исключения при открытии файла (FileNotFoundError) и при выполнении операций над числами (ValueError, ZeroDivisionError). Используйте конструкцию try-except-finally для обработки исключений и закрытия файла в блоке finally.

"""

def calculate_nums(data):
    file = None
    try:
        file = open(data, "r")
        a, b = map(int, file.readline().split(","))
        result = a + b * b
        return result

    except FileNotFoundError:
        print("File was not found")
    except ZeroDivisionError:
        print("You cannot divide by Zero")
    except ValueError:
        print("Wrong value")

    finally:
        if file:
            file.close()


print(calculate_nums("numbers.txt"))

def calculate_nums(data):
    file = None
    try:
        file = open(data, "r")
    except FileNotFoundError:
        print("File was not found")
    else:
        try:
            a, b = map(int, file.readline().split(","))
            result = a + b * b
            return result
        except ZeroDivisionError:
            print("You cannot divide by Zero")
        except ValueError:
            print("Wrong value")
    finally:
        if file:
            file.close()


print(calculate_nums("numbers.txt"))