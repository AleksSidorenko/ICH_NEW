# -*- coding: utf-8 -*-
"""Summary_10_111124.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pl0i5LRzgDUGffYe2TID3pITPeTmfljM

## Python fundamentals: Домашнее задание 19 (Python)

### 1.
Напишите программу, которая принимает список слов и возвращает список, содержащий только анаграммы.


Анаграммы - это слова, составленные из одних и тех же букв, но в разном порядке.


Создайте функцию anagrams, которая принимает список слов в качестве аргумента и возвращает список анаграмм. Используйте множества и сортировку букв в слове для проверки на анаграмму. Выведите результат на экран.


Пример переданного списка слов:


['cat', 'dog', 'tac', 'god', 'act']


Пример вывода:


Анаграммы: ['dog', 'god'], ['cat', 'tac', 'act']
"""

def anagrams(words):
    pairs = []
    used_words = set()
    for word in words:
        if word in used_words:
            continue
        group = [word]
        for other_word in words:
            if other_word != word and sorted(other_word) == sorted(word):
                group.append(other_word)
                used_words.add(other_word)
        used_words.add(word)
        if len(group) >= 2:
            pairs.append(group)
    return pairs

result = anagrams(['cat', 'dog', 'tac', 'god', 'act'])
print(f"Анаграммы: {", ".join(map(str, result))}")

words = ['cat', 'dog', 'tac', 'god', 'act', 'nos', 'nso']


def find_anagrams(words):
    result = []  # Common list

    while words:
        group = [words[0]]  # Create new group

        for word in words[1:]:  # Comparing the first word with others
            if sorted(word) == sorted(words[0]):
                group.append(word)

        words = list(set(words) - set(group)) # Delete duplicates
        result.append(group)

    return result


result = find_anagrams(words)

print(f"Anagrams:", *result, sep=", ")

# teacher
def anagrams(words):
    anagram_groups = []
    seen = set()

    for word in words:
        key = ''.join(sorted(word))
        if key not in seen:
            group = []
            for w in words:
                if ''.join(sorted(w)) == key:
                    group.append(w)
            # if len(group) > 1:
            anagram_groups.append(group)
            seen.add(key)

    return anagram_groups

def anagrams2(words):
    anagram_groups = []
    seen = []

    for word in words:
        key = set(word)
        if key not in seen:
            group = []
            for w in words:
                if set(w) == key:
                    group.append(w)
            # if len(group) > 1:
            anagram_groups.append(group)
            seen.append(key)

    return anagram_groups


# Пример использования
words = ['cat', 'dog', 'tac', 'god', 'act']
print("Анаграммы:", anagrams(words))
print("Анаграммы:", anagrams2(words))

# teacher
def anagrams(words):
    anagram_groups = []
    seen = set()

    for word in words:
        key = ''.join(sorted(word))
        if key not in seen:
            group = []
            for w in words:
                if ''.join(sorted(w)) == key:
                    group.append(w)
            if len(group) > 1:
                anagram_groups.append(group)
            seen.add(key)

    return anagram_groups

# Пример использования
words = ['cat', 'dog', 'tac', 'god', 'act', 'zxc', 'cxz', 'hjk']
result = anagrams(words)
print("Анаграммы: ", end="")
print(*result, sep=", ")

def anagrams(words):
    anagram_groups = []
    for w in words:
        group = []
        sorted_word = ''.join(sorted(w))
        for other_word in words[:]:
            other_word_sorted = ''.join(sorted(other_word))
            if other_word_sorted == sorted_word:
                group.append(other_word)
                words.remove(other_word)
            group = list(set(group))
        if len(group) > 1:
            anagram_groups.append(group)
    return anagram_groups

words = ['cat', 'cta', 'dog', 'tac', 'god', 'act', 'cta', 'cta', 'xyz', 'zxy', 'yzx']
anagram_groups = anagrams(words)
print(f'\nАнаграммы: ', anagram_groups)

# 1 "Используйте множества и сортировку букв в слове" я не понял какая может быть сортировка в set() - у них отсутствует сортировка и индексы
words2check = ['refine', 'cat', 'dog', 'tac', 'Friend', 'god', 'act', 'sheeeit', 'Cat', 'Frieren']


def anagrams(words):
    result = []
    not_ana = []

    while len(words) > 0:
        anagrams = []
        indexes = []
        for i, word in enumerate(words):
            if set(words[0].lower()) == set(word.lower()):
                anagrams.append(word)
                indexes.append(i)
        for i in indexes[::-1]:
            words.remove(words[i])
        result.append(anagrams) if len(anagrams) > 1 else not_ana.append(anagrams)
    return result, not_ana


result = anagrams(words2check)
print(f'The list of anagrams is: {result[0]}\nThe list of not anagrams is: {result[1]}')

def anagrams(word_list):
    result = []
    checked = set()
    for i in range(len(word_list)):
        if word_list[i] in checked:
            continue
        current = [word_list[i]]
        checked.add(word_list[i])

        for j in range(i + 1, len(word_list)):
            if sorted(word_list[i]) == sorted(word_list[j]):
                current.append(word_list[j])
                checked.add(word_list[j])

        if len(current) > 1:
            result.append(current)

    return result


words = ['cat', 'dog', 'tac', 'god', 'act', 'zxc', 'cxz']
print(anagrams(words))

# словарь
def anagrams(words):
    anagrams_collect = {}
    for word in words:
        sorted_word = ''.join(sorted(word))
        if sorted_word in anagrams_collect:
            anagrams_collect[sorted_word].append(word)
        else:
            anagrams_collect[sorted_word] = [word]
    res = []
    for group in anagrams_collect.values():
        if len(group) > 1:
            res.append(group)
    return res

user_input = ['cat', 'dog', 'tac', 'god', 'ogd', 'act', 'xcv', 'vcx']
text = list(user_input)
result = anagrams(text)
print(result)

def anagrams(words):
    anagram_group = {}  # Создаем пока пустое множество слов в одной группе

    for word in words:
        sorted_word = ''.join(sorted(word))  # Сортируем буквы в слове склеиваем новое слово
        if sorted_word not in anagram_group:
            anagram_group[sorted_word] = []  # Если отсортированного слова нет еще - создаем пустой список
        anagram_group[sorted_word].append(word)  # Добавляем слово в соответствующую группу анаграмм

    result = [group for group in anagram_group.values() if
              len(group) > 1]  # Отбираем только группы с более чем одним словом
    return result  # Возвращаем список найденных групп анаграмм


words = ['cat', 'dog', 'tac', 'god', 'act', 'zxc', 'cxz']  # Исходный список слов
print("Анаграммы:", anagrams(words))  # Выводим результат



"""1. Код перестает работать, если добавляются дополнительные слова. Каждое из них должно быть учтено в своей группе."""

# не универсально
a = ['cat', 'dog', 'tac', 'god', 'act']
print(a)
b,c,d,e,f = a

my_list = [sorted(b),sorted(c), sorted(d), sorted(e), sorted(f)]

t = [a[0]]

Q = []

for i  in range(len(a)):
    if sorted(a[i]) in my_list:
        if sorted(a[i]) == sorted(t[0]):
            t.append(a[i])
        else: Q.append(a[i])
print(Q)
print(t[1:])

# не универсально
def anagrams(l_words):
    i = 0
    anagram_list1 = []
    anagram_list2 = []
    word = l_words[i]
    while i < len(l_words): # for i in range(len(l_words)):
        if sorted(word) == sorted(l_words[i]):
            anagram_list1.append(l_words[i])
        else:
            anagram_list2.append(l_words[i])
        i = i + 1
    return (f'{anagram_list2}, {anagram_list1}')

list_words = ['cat', 'dog', 'tac', 'god', 'act', 'new']
print(anagrams(list_words))

"""### 2.
Напишите функцию is_subset, которая принимает два множества set1 и set2 и проверяет, является ли set1 подмножеством set2. Функция должна возвращать True, если все элементы из set1 содержатся в set2, и False в противном случае. Функция должна быть реализована без использования встроенных методов issubset или <=.


Пример множеств


{1, 2, 3}

{1, 2, 3, 4, 5}


Пример вывода:


True
"""

def is_subset(set1, set2):
    counter = 0
    for i in set1:
        if i in set2:
            counter+=1
        else:
            return False
    if counter == len(set1):
        return True


print(is_subset({1, 2, 3}, {1, 2, 3, 4, 5}))

def is_subset(set1, set2):
    result = len(set1 - set2) == 0
    return result


list1 = {1, 2, 3}
list2 = {1, 2, 3, 4, 5}
print(is_subset(list1, list2))

# 2.Напишите функцию is_subset, которая принимает два множества set1 и set2 и проверяет,
# является ли set1 подмножеством set2. Функция должна возвращать True,
# если все элементы из set1 содержатся в set2, и False в противном случае.
# Функция должна быть реализована без использования встроенных методов issubset или <=.
#
# Пример множеств
# {1, 2, 3}
# {1, 2, 3, 4, 5}
#
# Пример вывода:
# True

def compare_sets(setA, setB):
    intersection = setA & setB
    return intersection == setA


setA = {1, 2, 3}
setB = {1, 2, 3, 4, 5}

result = compare_sets(setA, setB)
print(result)

def is_subset(s1, s2):
    return False if { False for i in s1 if i not in s2 } == {False} else True


set1 = {1, 2, 3}
set2 = {1, 2, 3, 4, 5}
print(is_subset(set1, set2))

# teacher
def is_subset(set1, set2):
    return not set1 - set2

def is_subset2(set1, set2):
    for elem in set1:
        if elem not in set2:
            return False
    return True

# Пример использования
print(is_subset({1, 2, 3}, {1, 2, 3, 4, 5}))
print(is_subset({1, 6}, {1, 2, 3, 4, 5}))

print(is_subset2({1, 2, 3}, {1, 2, 3, 4, 5}))
print(is_subset2({1, 6}, {1, 2, 3, 4, 5}))