# -*- coding: utf-8 -*-
"""Summary_19_111124.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RdMpvt2EGgsxJLNbn-OchddIVAo2wSlv

## Python fundamentals: –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ 36 (Python)

### 1.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è URL-–∞–¥—Ä–µ—Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É Beautiful Soup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
"""

import requests
from bs4 import BeautifulSoup

def get_html(dome):
    url = "https://" + dome
    try:
        html = requests.get(url)
        html.raise_for_status()
        print(html.text)
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return
    soup = BeautifulSoup(html.text, "html.parser")
    links = soup.find_all('a')
    for link in links:
        print(link.get('href'))

name_dom = input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"example.com\"): ")
# name_dom = "example.com"
get_html(name_dom)

import requests
from bs4 import BeautifulSoup as bs


def extract_links(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.RequestException as e:
        print(f'Error during request: {e}')
        return

    soup = bs(response.text, "html.parser")
    links = soup.find_all('a')

    print(f'\nLinks from the web-page: ')
    for link in links:
        href=link.get('href')
        if href and not href.startswith('#'):
            print(href)


if __name__ == '__main__':
    extract_links('https://lms.itcareerhub.de/mod/assign/view.php?id=6733')

from bs4 import BeautifulSoup
import requests

def print_links(url = "https://www.wikipedia.org/"):
    response = requests.get(url)  #—Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ requests –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    soup = BeautifulSoup(response.text, 'html.parser') #–í–∞—Ä–∏–º —Å—É–ø :) –Ω–∞ –æ—Å–Ω–æ–≤–µ HTML —Ç–µ–∫—Å—Ç–∞
    for link in soup.find_all('a'): #–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª –∏ –º–µ—Ç–æ–¥ find_all —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤—Å–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
        href = link.get('href')
        if href.startswith('//'): #–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å // —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ –æ–Ω–∏ –Ω–∞—á–∏–Ω–∞–ª–∏—Å—å —Å https –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å
            href = 'https:' + href
            print(href)  # –í—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É

# webpage = input("enter the URL: ") # –ø—Ä–æ—Å–∏–º —é–∑–µ—Ä–∞ –≤–≤–µ—Å—Ç–∏ –≤–¥—Ä–µ–º –≤–µ–±—Å–∞–π—Ç–∞
# print_links(webpage)
print_links()

from bs4 import BeautifulSoup
import requests


def get_urls(url):
    # creating HTTP-request and getting HTML-code this as text
    html = requests.get(url).text
    # creating object BeautifulSoup from HTML
    soup = BeautifulSoup(html, "html.parser")
    # taking all links from given URL
    links = soup.find_all('a')
    # creating new output list
    link_list = []
    # cycle for extracting links from object
    for link in links:
        href = link.attrs.get('href')
        if href[:4] == 'http':
            link_list.append(href)
    # returning result
    return link_list


print(f'List of urls: {get_urls("https://youtube.com")}')

"""### 2.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è URL-–∞–¥—Ä–µ—Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É Beautiful Soup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è (—Ç–µ–≥–∏ h1, h2, h3 –∏ —Ç.–¥.) —Å –∏—Ö —Ç–µ–∫—Å—Ç–æ–º.


"""

import requests
from bs4 import BeautifulSoup as bs


def extract_tags_text(url, *headings):
    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.RequestException as e:
        print(f'Error during request: {e}')
        return

    soup = bs(response.text, 'html.parser')
    for heading in headings:
        tags = soup.find_all(heading)
        if not tags:
            print(f'No headings found for {heading}')
            continue
        print(f'\nHeadings for {heading}:')
        for i, tag in enumerate(tags, start=1):
            print(f'{i}. {tag.get_text(strip=True)}')


if __name__ == '__main__':
    extract_tags_text('https://www.w3schools.com/html/html_headings.asp', 'h1', 'h6')

def select_headers(url, header_lvl = 'h1'):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    for header in soup.find_all(header_lvl):
        print(header.get_text())


link = "https://www.crummy.com/software/BeautifulSoup/bs4/doc/"
select_headers(link)

# link = input(f"enter the URL: ")
# header = input(f"enter the header level: ")
# select_headers(link, header)

from bs4 import BeautifulSoup
import requests


def get_titles(url, title_level):
    # creating HTTP-request and getting HTML-code this as text
    html = requests.get(url).text
    # creating object BeautifulSoup from HTML
    soup = BeautifulSoup(html, "html.parser")
    # creating error check and trying to take title from URL
    try:
        title = soup.find(title_level).text
        return f'Title of requested link: {title}'
    except AttributeError as e:
        return AttributeError(f'ERROR: URL "{url}" has no title "{title_level}"')


print(get_titles('https://youtube.com', 'h1'))
# ERROR: URL "https://youtube.com" has no title "h1"
print(get_titles('https://youtube.com', 'title'))
# Title of requested link: YouTube
print(get_titles('https://example.com', 'h1'))
# Title of requested link: Example Domain
print(get_titles('https://example.com', 'h2'))
# ERROR: URL "https://example.com" has no title "h2"

import requests
from bs4 import BeautifulSoup

def get_headers(name_dome, header_lvl):
    url = "https://" + name_dome
    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.RequestException as error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {error}")
        return
    soup = BeautifulSoup(response.text, "html.parser")
    headers = soup.find_all(f'h{header_lvl}')
    if headers:
        print(f"\n–ó–∞–≥–æ–ª–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è h{header_lvl}:")
        for tag in headers:
            print("-", tag.get_text(strip=True))
    else:
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è h{header_lvl} –≤ {url} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

name_dom = input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"example.com\"): ")
while True:
    try:
        header_level = int(input("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ (1‚Äì6): "))
        if 1 <= header_level <= 6:
            get_headers(name_dom, header_level)
            break
        raise ValueError("–£—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 6.")
    except ValueError as e:
        print(e)

"""## Python fundamentals: –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ 37 (Python)

### 1.
–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ich_edit —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã. Users —Å –ø–æ–ª—è–º–∏ (id, name, age), Products —Å –ø–æ–ª—è–º–∏ (pid, prod, quantity) –∏ Sales —Å –ø–æ–ª—è–º–∏ (sid, id, pid).

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –µ–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ç–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç.
"""

# +++++++++++++++++++++
# –ó–∞–¥–∞–Ω–∏–µ 1
# +++++++++++++++++++++
# –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ich_edit —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã.
# Users —Å –ø–æ–ª—è–º–∏ (id, name, age), Products —Å –ø–æ–ª—è–º–∏ (pid, prod, quantity) –∏ Sales —Å –ø–æ–ª—è–º–∏ (sid, id, pid).
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –µ–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ,
# —á—Ç–æ —Ç–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç.

# Comment: —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∑–∞–¥–∞–Ω–∏—è (Users, Products –∏ Sales) –ø—É—Å—Ç—ã–µ. –ü–æ—ç—Ç–æ–º—É —è —Ä–µ—à–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã–ñ
# users, product –∏ sales. –ü—Ä–∏ —Ç–æ–º –∂–µ —Å–∞–º–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏


from colorama import Fore, Style, init  # –ò–º–ø–æ—Ä–∏—Ç—Ä–æ–≤–∞–ª–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∫—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å—Ç–∏–ª–µ–π
init(autoreset=True)
import mysql.connector

dbconfig = {'host': 'ich-db.ccegls0svc9m.eu-central-1.rds.amazonaws.com',
'user': 'ich1',
'password': 'password',
'database': 'ich_edit',
}
conn = mysql.connector.connect(**dbconfig)

# # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤:
cursor = conn.cursor()

table_selector = input('Enter name of the Table ("users"/ "product"/ "sales"): ')

query_users = """SELECT id, name, age FROM users"""
query_products = """SELECT pid, prod, quantity FROM product"""
query_sales = """SELECT sid, id, pid FROM sales"""

if table_selector == 'users':
    cursor.execute(query_users)
    rows = cursor.fetchall()
    print(f'{Fore.CYAN}{Style.BRIGHT}üìã"users" Table:{Style.RESET_ALL}')
    for row in rows:
        print(row)
elif table_selector == 'product':
    cursor.execute(query_products)
    rows = cursor.fetchall()
    print(f'{Fore.YELLOW}{Style.BRIGHT}üìã"product" Table:{Style.RESET_ALL}')
    for row in rows:
        print(row)
elif table_selector == 'sales':
    cursor.execute(query_sales)
    rows = cursor.fetchall()
    print(f'{Fore.GREEN}{Style.BRIGHT}üìã"sales Table:{Style.RESET_ALL}')
    for row in rows:
        print(row)
else:
    print(f'{Fore.CYAN}{Style.BRIGHT} You have to choose one of the following tables: users, product or sales!{Style.RESET_ALL}')

cursor.close()
conn.close()

import mysql.connector
# using database with edit option
db = {'host': 'ich-edit.edu.itcareerhub.de',
      'user': 'ich1',
      'password': 'ich1_password_ilovedbs',
      'database': 'ich_edit'}
# creating variables for controlling of database connection and requests
connection = mysql.connector.connect(**db)
cursor = connection.cursor()
# creating var for decoration
frame = '-------------------------------------------------------------'
# creating list of allowed tables to look
allowed_tables = ['Users', 'Products', 'Sales']
# creating loop for closing application
close_connection = ""
while not close_connection:
    # creating user input var for table name
    ask_table_name = input('Enter table name (Users, Products or Sales) or press enter to quit: ')
    if ask_table_name == "":
        close_connection = True
        print('Closing connection.')
        break
    # checking if table in allowed tables to look
    if ask_table_name in allowed_tables:
        if ask_table_name == 'Users':
            # using table "Users"
            cursor.execute('select * from Users;')
            users = cursor.fetchall()
            print(frame, f'\n\n>> Showing table: {ask_table_name} <<\n')
            for customer_id, customer_name, customer_age in users:
                print(f'Customer ID: {customer_id}\nName: {customer_name}\nAge: {customer_age}\n')
            print(frame)
        if ask_table_name == 'Products':
            # using table "Products"
            cursor.execute('select * from Products;')
            products = cursor.fetchall()
            print(frame, f'\n\n>> Showing table: {ask_table_name} <<\n')
            for product_id, product_name, product_quantity in products:
                print(f'Product ID: {product_id}\nName: {product_name}\nQuantity: {product_quantity}\n')
            print(frame)
        if ask_table_name == 'Sales':
            # using table "Sales"
            cursor.execute('select * from Sales;')
            sales = cursor.fetchall()
            print(frame, f'\n\n>> Showing table: {ask_table_name} <<\n')
            for sale_id, customer_id, product_id in sales:
                print(f'Sale ID: {sale_id}\nCustomer ID: {customer_id}\nProduct ID: {product_id}\n')
            print(frame)
    # if table not exist
    else: print(f'\n>> MySQL ERROR | Table "ich_edit.{ask_table_name}" not found. <<', frame, sep="\n")
# closing connection to database
cursor.close()
connection.close()

import mysql.connector

dbconfig = {'host': 'ich-db.ccegls0svc9m.eu-central-1.rds.amazonaws.com',
            'user': 'ich1',
            'password': 'password',
            'database': 'ich_edit'}

connection = mysql.connector.connect(**dbconfig)
cursor = connection.cursor()

# table_name = input("Enter the table name (users, product, or sales): ").strip()
table_name = 'product'
query = f"SHOW TABLES LIKE '{table_name}'"  # —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
cursor.execute(query)
table_exists = cursor.fetchone()

if table_exists:
    query = f"SELECT * FROM {table_name}"
    cursor.execute(query)
    rows = cursor.fetchall()

    if rows:
        for row in rows:
            print(row)
    else:
        print(f"The table '{table_name}' is empty.")
else:
    print(f"The table '{table_name}' does not exist.")

cursor.close()
connection.close()

# 1. –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ich_edit —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã. Users —Å –ø–æ–ª—è–º–∏ (id, name, age), Products —Å –ø–æ–ª—è–º–∏ (pid, prod, quantity)
# –∏ Sales —Å –ø–æ–ª—è–º–∏ (sid, id, pid).
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –µ–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ç–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç.


import mysql.connector
import tabulate

try:
    conn_edit = mysql.connector.connect(
        host='ich-edit.edu.itcareerhub.de',  # –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
        user='ich1',
        password='ich1_password_ilovedbs'
    )
except mysql.connector.Error as e:
    print("Error during connection:", e)
    exit()

cursor = conn_edit.cursor()
cursor.execute('Create schema if not exists 111124_Golubenko')
cursor.execute('USE 111124_Golubenko')


cursor.execute("drop table if exists Sales")
cursor.execute("drop table if exists Products")
cursor.execute("drop table if exists Users")

create_Users_query = '''
create table if not exists Users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(20),
    age DECIMAL(3)
)'''

cursor.execute(create_Users_query)

insert_data_Users = '''
INSERT INTO Users (name, age)
VALUES (%s, %s)'''
initial_data_Users = [
    ('Alex', 35),
    ('Bob', 25),
    ('Charlie', 40)
]
cursor.executemany(insert_data_Users, initial_data_Users)
conn_edit.commit()

create_Products_query = '''
create table if not exists Products (
    pid INT AUTO_INCREMENT PRIMARY KEY,
    prod VARCHAR(50),
    quantity DECIMAL(5)
)'''

cursor.execute(create_Products_query)

insert_data_Products = '''
INSERT INTO Products (prod, quantity)
VALUES (%s, %s)'''
initial_data_Products = [
    ('Samsung', 50),
    ('Motorola', 25),
    ('Xiaomi', 40)
]
cursor.executemany(insert_data_Products, initial_data_Products)
conn_edit.commit()

create_Sales_query = '''
create table if not exists Sales (
    sid INT AUTO_INCREMENT PRIMARY KEY,
    id INT,
    pid INT,
    FOREIGN KEY (id) REFERENCES Users(id),
    FOREIGN KEY (pid) REFERENCES Products(pid)
)'''

cursor.execute(create_Sales_query)

insert_data_Sales = '''
INSERT INTO Sales (id, pid)
VALUES (%s, %s)'''

initial_data_Sales = [
    (1, 2),
    (2, 3),
    (3, 1),
    (1, 3),
    (3, 2)
]
cursor.executemany(insert_data_Sales, initial_data_Sales)
conn_edit.commit()

def choose_table(cursor):
    cursor.execute('show tables')
    tables = [t[0] for t in cursor.fetchall()]
    while True:
        user_choice = input(f'\nSelect a table from {tables} or push Enter for exit: ').strip().capitalize()
        if not user_choice:
            print('Exiting...')
            break
        if user_choice in tables:
            cursor.execute(f"SELECT * FROM {user_choice}")
            rows = cursor.fetchall()
            headers = [i[0] for i in cursor.description]
            print("\n" + tabulate.tabulate(rows, headers=headers, tablefmt="grid"))
        else:
            print (f'Error: {user_choice} is not a valid table.')

choose_table(cursor)
cursor.close()
conn_edit.close()

"""### 2.
–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ich_edit —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã. Users —Å –ø–æ–ª—è–º–∏ (id, name, age), Products —Å –ø–æ–ª—è–º–∏ (pid, prod, quantity) –∏ Sales —Å –ø–æ–ª—è–º–∏ (sid, id, pid).

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∏–º–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users, –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.


"""

import mysql.connector

dbconfig = {
    'host': 'ich-db.ccegls0svc9m.eu-central-1.rds.amazonaws.com',
    'user': 'ich1',
    'password': 'password',
    'database': 'ich_edit',
}

conn = mysql.connector.connect(**dbconfig)
cursor = conn.cursor()

query1 = "SELECT DISTINCT name FROM users"

cursor.execute(query1)
names = cursor.fetchall()

print("\nüìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
for name in names:
    print(name[0])  # –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∏–º—è, –Ω–µ –∫–æ—Ä—Ç–µ–∂

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏–º—è
selected_name = input("\n‚úèÔ∏è  Enter the name of the user to see their purchases: ")

# –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
query = """
SELECT u.name, p.prod
FROM users u
JOIN sales s ON u.id = s.id
JOIN product p ON s.pid = p.pid
WHERE u.name = %s;
"""

cursor.execute(query, (selected_name,))
results = cursor.fetchall()

if results: # –ï—Å–ª–∏ –ø–æ–∫—É–ø–∫–∏ –µ—Å—Ç—å, —Ç–æ –≤—ã–≤–æ–¥–∏–º
    print(f"\nüõí Purchases made by {selected_name}:")
    for row in results:
        print(f"- {row[1]}")
else: # –ï—Å–ª–∏ –ø–æ–∫—É–ø–æ–∫ –Ω–µ—Ç
    print(f"\n‚ùó No purchases found for user: {selected_name}")


cursor.close()
conn.close()

import mysql.connector
# connecting to database
db = {'host': 'ich-edit.edu.itcareerhub.de',
      'user': 'ich1',
      'password': 'ich1_password_ilovedbs',
      'database': 'ich_edit'}
# creating variables for controlling of database connection and requests
connection = mysql.connector.connect(**db)
cursor = connection.cursor()
# creating variable for decoration
frame = '-------------------------------------------------------------'
# creating patterns of table calling
calling_table_users = '''select name from Users;'''
calling_joined_tables = '''
                        select t1.prod from (select u.name, p.prod from Users u
                        join Sales s on u.id = s.id
                        join Products p on s.pid = p.pid
                        where u.name = %(customer_name)s) t1;
                        '''
# calling table with customers
cursor.execute(calling_table_users)
customers = cursor.fetchall()
# fetching names from the customer table
customers_name = [customer[0] for customer in customers]
print('Customers:')
for customer in customers_name:
      print(f'|>> {customer}')
print(frame)
# creating loop for closing application
close_app = ""
while not close_app:
    # creating variable for asking customers name
    ask_customer_name = input('Enter customer name or press enter to close app: ')
    if ask_customer_name == '':
        close_app = True
        print('Closing app.')
        break
    # checking if selected customer exist in table
    if ask_customer_name in customers_name:
        # calling table for all products of any user
        cursor.execute(calling_joined_tables, {'customer_name': ask_customer_name})
        products = cursor.fetchall()
        # checking if selected existed customer did any purchase
        if products:
            print(f'\nAll bought products by {ask_customer_name}:')
            for product in products:
                print(f'>> {product[0]}')
            # print('-----------------------')
            print(frame)
        # if no purchase for selected existing customer
        else: print(f'\n>> Customer "{ask_customer_name}" did not purchase anything.', frame, sep='\n')
    # if selected customer not exist
    else: print(f'\n>> ERROR | Customer "{ask_customer_name}" not found.', frame, sep='\n')
# closing connection to database
cursor.close()
connection.close()

# 2. –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ich_edit —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã. Users —Å –ø–æ–ª—è–º–∏ (id, name, age),
# Products —Å –ø–æ–ª—è–º–∏ (pid, prod, quantity) –∏ Sales —Å –ø–æ–ª—è–º–∏ (sid, id, pid).
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∏–º–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users, –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö
# –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

import mysql.connector

try:
    conn_edit = mysql.connector.connect(
        host='ich-edit.edu.itcareerhub.de',  # –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
        user='ich1',
        password='ich1_password_ilovedbs',
        database='111124_Golubenko'
    )
except mysql.connector.Error as e:
    print("Error during connection:", e)
    exit()

cursor = conn_edit.cursor()
cursor.execute('select name from Users order by name')
names = [_[0] for _ in cursor.fetchall()]
user_choice = input(f'Choose a name from list {names}: ').strip().capitalize()
if user_choice in names:
    query = ''' select u.name, p.prod, p.quantity
    from Sales as s
    join Products as p on s.pid = p.pid
    join Users as u on u.id = s.id
    where u.name = %s '''

    cursor.execute(query, (user_choice,))
    rows = cursor.fetchall()
    for name, prod, quantity in rows:
        print(f'\nname: {name}\nproduct: {prod}\nquantity: {quantity}')
else:
    print('Invalid choice')

cursor.close()
conn_edit.close()

"""## Python fundamentals: –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ 38 (Python)

### –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ 38
1. –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.
3. –í–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.
4. –ü–æ–∑–≤–æ–ª–∏—Ç—å –∏—Å–∫–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—é.
5. –ü—Ä–∏ –≤–≤–æ–¥–µ –∏—Å–∫–æ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ - –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –±–æ–ª—å—à–µ, –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
"""

# 1. –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
# 2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.
# 3. –í–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.
# 4. –ü–æ–∑–≤–æ–ª–∏—Ç—å –∏—Å–∫–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—é.
# 5. –ü—Ä–∏ –≤–≤–æ–¥–µ –∏—Å–∫–æ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ -
# –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –±–æ–ª—å—à–µ, –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.

import mysql.connector

try:
    conn_edit = mysql.connector.connect(
        host='ich-edit.edu.itcareerhub.de',
        user='ich1',
        password='ich1_password_ilovedbs',
        database='111124_Golubenko'
    )
except mysql.connector.Error as e:
    print("Error during connection:", e)
    exit()

cursor = conn_edit.cursor()

def show_tables(cursor):
    cursor.execute('show tables')
    tables = [t[0] for t in cursor.fetchall()]
    tables.sort()
    return tables

def choose_table(cursor):
    tables = show_tables(cursor)
    while True:
        user_table = input(f'Please select a table from {tables} or press Enter to quit: ').strip()
        if user_table == '':
            print('Exiting...')
            return None
        if user_table in tables:
            return user_table
        print('Please select a valid table')

def choose_header(cursor, user_table):
    cursor.execute(f'select * from {user_table}')
    _ = cursor.fetchall()
    headers = [h[0] for h in cursor.description]
    while True:
        user_header = input(f'\nPlease select a header from {headers} or press Enter to quit: ').strip()
        if user_header == '':
            print('Exiting...')
            return None
        if user_header in headers:
            return user_header
        print('Please select a valid header')


def search_value(cursor):
    user_table = choose_table(cursor)
    if not user_table:
        return
    user_header = choose_header(cursor, user_table)
    if not user_header:
        return

    comparison_operator = input('Choose a comparison operator ( > or < or =): ').strip()
    if comparison_operator not in ('>', '<', '='):
        print('Invalid comparison operator.')
        return

    user_value = input(f'\nSet a value to search in field "{user_header}": ').strip()
    if user_value == '':
        cursor.execute(f'select {user_header} from {user_table}')
        values = sorted([v[0] for v in cursor.fetchall()])
        print(f'\n{user_header}:')
        for v in values:
            print(v)
        return

    query = f"SELECT {user_header} FROM {user_table} WHERE {user_header} {comparison_operator} %s"

    try:
        cursor.execute(query, (user_value,))
        result = cursor.fetchall()
        if result:
            print(f'\nResults for condition {user_header} {comparison_operator} {user_value}:')
            for r in result:
                print(r[0])
        else:
            print('\nNo matching records found.')

    except Exception as e:
        print(f'Error during query execution: {e}')

search_value(cursor)
cursor.close()
conn_edit.close()

# 1. –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# 2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:
# 3. –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:
# 4. –ü–æ–∑–≤–æ–ª–∏—Ç—å –∏—Å–∫–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—é:
# 5. –ü—Ä–∏ –≤–≤–æ–¥–µ –∏—Å–∫–æ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ - –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö
# –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –±–æ–ª—å—à–µ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –≤–≤–µ–¥–µ–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
import mysql.connector

DB = 'hr'


def call_database(data):
    global DB
    dbconfig = {'host': 'ich-db.edu.itcareerhub.de',
                'user': 'ich1',
                'password': 'password',
                'database': DB}

    connection = mysql.connector.connect(**dbconfig)

    cursor = connection.cursor()
    try:
        cursor.execute(data)
        result = cursor.fetchall()
        print("=== ***** RESULT ***** ===")
        for table in result:
            print(table)
    except mysql.connector.Error as err:
        print("Query error: ", err)
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()


def show_databases():
    database_query = """SHOW DATABASES"""
    call_database(database_query)


def change_database():
    global DB
    new_db = input("Enter the database to connect to: ")
    DB = new_db
    print(f"Switched to database: {DB}")


def show_tables():
    all_tables_query = """SHOW TABLES"""
    call_database(all_tables_query)


def show_table_fields():
    user_selected_table = input("Please enter the name of the table: ")
    table_fields_query = f"DESCRIBE {user_selected_table}"
    call_database(table_fields_query)


def search_specific_values():
    table = input("Please enter the name of the table: ")
    field = input("Please enter the desired field to search: ")
    operator = input("Please enter the criteria '<', '>' or '=' : ")
    value = input(f"Please select the value to search within {field}: ")
    if value.isdigit():
        final_value = value
    else:
        final_value = f"'{value}'"
    user_query = f"SELECT * FROM {table} WHERE {field} {operator} {final_value}"
    call_database(user_query)


def main_menu():
    while True:
        print("\n=== Main Menu ===")
        print("1. Show all tables")
        print("2. Describe table fields")
        print("3. Search for values")
        print("4. Change database")
        print("5. Show database list")
        print("6. Exit")
        print()

        choice = input("Your choice: ")
        if choice == "1":
            show_tables()
        elif choice == "2":
            show_table_fields()
        elif choice == "3":
            search_specific_values()
        elif choice == "4":
            change_database()
        elif choice == "5":
            show_databases()
        elif choice == "6":
            print("Exiting program.")
            break
        else:
            print("Invalid choice, try again.")


main_menu()

# –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ 38
# 1 –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
# 2 –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.
# 3 –í–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.
# 4 –ü–æ–∑–≤–æ–ª–∏—Ç—å –∏—Å–∫–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—é.
# 5 –ü—Ä–∏ –≤–≤–æ–¥–µ –∏—Å–∫–æ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ - –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö
# –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –±–æ–ª—å—à–µ, –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.

import mysql.connector

dbconfig = {'host': 'ich-edit.edu.itcareerhub.de',
            'user': 'ich1',
            'password': 'ich1_password_ilovedbs',
            'database': 'ich_edit'}
conn = mysql.connector.connect(**dbconfig)
cursor = conn.cursor()
print("Connection successful!")

# –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
cursor.execute("SHOW tables")
list_tables = map(lambda x: x[0], cursor.fetchall())
for num, table in enumerate(list(list_tables), 1):
    print(f"{num}) {table}")

# –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–∞–±–ª–∏—Ü—ã
user_input = input("Choose table: ")

# –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
print(f"Fields table '{user_input}'")
cursor.execute(f"DESCRIBE {user_input}")
fields = cursor.fetchall()
for name_field in fields:
    print(name_field[0])

# –í—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—é
user_field = input(f"Choose the table field '{user_input}': ")
print(f"Values table '{user_input}' for field '{user_field}'")
cursor.execute(f"select {user_field} from {user_input}")
table_values_by_field = [x[0] for x in cursor.fetchall()]
for num, value in enumerate(table_values_by_field, start=1):
    print(f"{num}) {value}")
user_value = input(f"Choose value for field '{user_field}': ")

# –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è
value_type = None
for col in fields:
    if col[0] == user_field:
        value_type = col[1]

if value_type.startswith("int"):
    int(user_value)
else:
    str(user_value)

query = f"SELECT * FROM {user_input} WHERE {user_field} = %s"
cursor.execute(query, (user_value,))
print(cursor.fetchall())

#–ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–µ! –ó–Ω–∞—á–∏—Ç –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ—â–µ –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫ < > =
if value_type.startswith("int"):
    int(user_value)
    user_char = input(f"Choose char for field '{user_field}' (< > =): ")
    user_num = int(input(f"Choose number for field '{user_field}': "))
    query_num = cursor.execute(f"select * from {user_input} where {user_field} {user_char} {user_num}")
    print(cursor.fetchall())


cursor.close()
conn.close()