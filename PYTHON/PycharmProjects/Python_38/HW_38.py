"""
1. –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:
3. –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:
4. –ü–æ–∑–≤–æ–ª–∏—Ç—å –∏—Å–∫–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—é:
5. –ü—Ä–∏ –≤–≤–æ–¥–µ –∏—Å–∫–æ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ - –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö
–≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –±–æ–ª—å—à–µ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –≤–≤–µ–¥–µ–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
"""
"""

üßê-------------- –ü—Å–µ–≤–¥–æ–∫–æ–¥ ----------------------------
1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é `mysql.connector`
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å dbconfig
"""
# ----------------
# GPT 1
# ---------------

# import mysql.connector
#
# # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
# dbconfig = { 'host': 'ich-db.ccegls0svc9m.eu-central-1.rds.amazonaws.com',
#              'user': 'ich1',
#              'password': 'password',
#              'database': 'ich_edit' }
#
# # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
# conn = mysql.connector.connect(**dbconfig)
# cursor = conn.cursor()
#
# """
# 2. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#    - –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL-–∑–∞–ø—Ä–æ—Å: SHOW TABLES
#    - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
# """
# # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
# cursor.execute("SHOW TABLES")
# tables = [table[0] for table in cursor.fetchall()]
#
# """
# 3. –í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö
#    - –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
#    - –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
# """
# # –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
# print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É:")
# for idx, table_name in enumerate(tables, 1):
#     print(f"{idx}. {table_name}")
# table_index = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: ")) - 1
# selected_table = tables[table_index]
#
# """
# 4. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π (—Å—Ç–æ–ª–±—Ü–æ–≤) –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
#    - –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL-–∑–∞–ø—Ä–æ—Å: DESCRIBE –∏–º—è_—Ç–∞–±–ª–∏—Ü—ã
#    - –ò–∑–≤–ª–µ—á—å –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
# """
# # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π —Ç–∞–±–ª–∏—Ü—ã
# cursor.execute(f"DESCRIBE {selected_table}")
# fields = [row[0] for row in cursor.fetchall()]
#
# """
# 5. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
#    - –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
#    - –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
# """
# # –í—ã–±–æ—Ä –ø–æ–ª—è
# print(f"\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞–±–ª–∏—Ü—É: {selected_table}")
# print("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
# for idx, field in enumerate(fields, 1):
#     print(f"{idx}. {field}")
# field_index = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è: ")) - 1
# selected_field = fields[field_index]
#
# """
# 6. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
#    - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ)
# """
# # –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
# value = input(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ø–æ–ª–µ '{selected_field}': ")
# """
# 7. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: '=', '<', '>'
#    - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
#    - –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—ã–±–æ—Ä
# """
#
# print("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
# print("1. =\n2. <\n3. >")
# operator_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: ")
# operator_map = {'1': '=', '2': '<', '3': '>'}
# operator = operator_map.get(operator_choice, '=')
#
# """
# 8. –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL-–∑–∞–ø—Ä–æ—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–≤ —Å—Ç—Ä–æ–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—é, –∑–Ω–∞—á–µ–Ω–∏—é –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
#    - –ü—Ä–∏–º–µ—Ä: SELECT * FROM –∏–º—è_—Ç–∞–±–ª–∏—Ü—ã WHERE –ø–æ–ª–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–µ
# """
# # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞
# query = f"SELECT * FROM {selected_table} WHERE {selected_field} {operator} %s"
# try:
#     cursor.execute(query, (value,))
#     results = cursor.fetchall()
#
#     """
#     9. –í—ã–≤–µ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
#        - –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –Ω–µ—Ç ‚Äî –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
#     """
#
#     if results:
#         print("\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:")
#         for row in results:
#             print(row)
#     else:
#         print("\n–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å—É.")
# except Exception as e:
#     print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", e)
#
#
# --------------------
# GPT 2
# ---------------------

# import mysql.connector
# from mysql.connector import Error
# from tabulate import tabulate
#
# def connect_to_database(config):
#     try:
#         conn = mysql.connector.connect(**config)
#         if conn.is_connected():
#             print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
#             return conn
#     except Error as e:
#         print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", e)
#     return None
#
# def get_tables(cursor):
#     cursor.execute("SHOW TABLES")
#     return [table[0] for table in cursor.fetchall()]
#
# def get_fields(cursor, table_name):
#     cursor.execute(f"DESCRIBE {table_name}")
#     return cursor.fetchall()
#
# def safe_choice(options, prompt):
#     while True:
#         try:
#             choice = int(input(prompt))
#             if 1 <= choice <= len(options):
#                 return choice - 1
#             else:
#                 print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
#         except ValueError:
#             print("üö´ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
#
# def parse_input_value(field_type):
#     is_numeric = any(x in field_type.lower() for x in ['int', 'float', 'double', 'decimal'])
#     is_date = 'date' in field_type.lower() or 'time' in field_type.lower()
#     is_string = any(x in field_type.lower() for x in ['char', 'text'])
#
#     if is_numeric:
#         input_hint = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123 –∏–ª–∏ 45.67): "
#     elif is_date:
#         input_hint = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD' –∏–ª–∏ 'YYYY-MM-DD HH:MM:SS': "
#     elif is_string:
#         input_hint = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: hello): "
#     else:
#         input_hint = "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "
#
#     while True:
#         value = input(input_hint)
#         try:
#             if is_numeric:
#                 float(value)
#             return value
#         except ValueError:
#             print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
# def choose_operator_for_type(field_type):
#     is_numeric_or_date = any(x in field_type.lower() for x in ['int', 'float', 'double', 'decimal', 'date', 'time'])
#     is_string = any(x in field_type.lower() for x in ['char', 'text'])
#
#     operator_map = {'1': '='}
#     if is_numeric_or_date:
#         operator_map.update({'2': '<', '3': '>'})
#
#     print("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
#     for key, op in operator_map.items():
#         description = {'=': '—Ä–∞–≤–Ω–æ', '<': '–º–µ–Ω—å—à–µ', '>': '–±–æ–ª—å—à–µ'}[op]
#         print(f"{key}. {op} ({description})")
#
#     while True:
#         choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: ")
#         if choice in operator_map:
#             return operator_map[choice]
#         else:
#             print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
#
# # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
# dbconfig = {
#     'host': 'ich-db.ccegls0svc9m.eu-central-1.rds.amazonaws.com',
#     'user': 'ich1',
#     'password': 'password',
#     'database': 'ich_edit'
# }
#
# # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
# conn = connect_to_database(dbconfig)
# if not conn:
#     exit()
#
# cursor = conn.cursor()
#
# # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
# tables = get_tables(cursor)
# if not tables:
#     print("‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#     exit()
#
# print("\nüìÑ –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:")
# for idx, table_name in enumerate(tables, 1):
#     print(f"{idx}. {table_name}")
#
# table_index = safe_choice(tables, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: ")
# selected_table = tables[table_index]
#
# # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–µ–π
# field_info = get_fields(cursor, selected_table)
# fields = [row[0] for row in field_info]
# field_types = {row[0]: row[1] for row in field_info}
#
# print(f"\nüìÇ –¢–∞–±–ª–∏—Ü–∞: {selected_table}")
# print("üìå –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π:")
# for idx, field in enumerate(fields, 1):
#     print(f"{idx}. {field} ({field_types[field]})")
#
# field_index = safe_choice(fields, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ")
# selected_field = fields[field_index]
# field_type = field_types[selected_field]
#
# # –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
# print(f"\nüîç –í—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ: {selected_field} (—Ç–∏–ø: {field_type})")
# value = parse_input_value(field_type)
# operator = choose_operator_for_type(field_type)
#
# # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
# query = f"SELECT * FROM {selected_table} WHERE {selected_field} {operator} %s"
# try:
#     cursor.execute(query, (value,))
#     results = cursor.fetchall()
#     # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª–µ–π
#     column_names = [desc[0] for desc in cursor.description]
#     print(f"\nüîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ '{selected_table}' –ø–æ —É—Å–ª–æ–≤–∏—é: {selected_field} {operator} {value}\n")
#     if results:
#         print(tabulate(results, headers=column_names, tablefmt="fancy_grid", stralign="center", numalign="center"))
#     else:
#         print("üö´ –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
# except Error as e:
#     print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", e)
#
# # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
# cursor.close()
# conn.close()



# --------------------
# GPT 3 - –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
# ---------------------

# import mysql.connector
# from mysql.connector import Error
# from tabulate import tabulate
#
# # ===============================================================
# # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
# # ===============================================================
# def connect_to_database(config):
#     try:
#         conn = mysql.connector.connect(**config)
#         if conn.is_connected():
#             print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ.")
#             return conn
#     except Error as e:
#         print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", e)
#     return None
#
# # ===============================================================
# # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# # ===============================================================
# def get_tables(cursor):
#     cursor.execute("SHOW TABLES")
#     return [table[0] for table in cursor.fetchall()]
#
# # ===============================================================
# # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
# # ===============================================================
# def get_fields(cursor, table_name):
#     cursor.execute(f"DESCRIBE {table_name}")
#     return cursor.fetchall()
#
# # ===============================================================
# # 4. –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
# # ===============================================================
# def safe_choice(options, prompt):
#     while True:
#         try:
#             choice = int(input(prompt))
#             if 1 <= choice <= len(options):
#                 return choice - 1
#             else:
#                 print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
#         except ValueError:
#             print("üö´ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
#
# # ===============================================================
# # 5. –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö + –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# # ===============================================================
# def parse_input_value(field_type):
#     is_numeric = any(x in field_type.lower() for x in ['int', 'float', 'double', 'decimal'])
#     is_date = 'date' in field_type.lower() or 'time' in field_type.lower()
#     is_string = any(x in field_type.lower() for x in ['char', 'text'])
#
#     if is_numeric:
#         input_hint = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123 –∏–ª–∏ 45.67): "
#     elif is_date:
#         input_hint = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD' –∏–ª–∏ 'YYYY-MM-DD HH:MM:SS': "
#     elif is_string:
#         input_hint = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: hello): "
#     else:
#         input_hint = "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "
#
#     while True:
#         value = input(input_hint)
#         try:
#             if is_numeric:
#                 float(value)
#             return value
#         except ValueError:
#             print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
# # ===============================================================
# # 6. –í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
# # ===============================================================
# def choose_operator_for_type(field_type):
#     is_numeric_or_date = any(x in field_type.lower() for x in ['int', 'float', 'double', 'decimal', 'date', 'time'])
#     operator_map = {'1': '='}
#     if is_numeric_or_date:
#         operator_map.update({'2': '<', '3': '>'})
#
#     print("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
#     for key, op in operator_map.items():
#         desc = {'=': '—Ä–∞–≤–Ω–æ', '<': '–º–µ–Ω—å—à–µ', '>': '–±–æ–ª—å—à–µ'}[op]
#         print(f"{key}. {op} ({desc})")
#
#     while True:
#         choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: ")
#         if choice in operator_map:
#             return operator_map[choice]
#         else:
#             print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
#
# # ===============================================================
# # 7. –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É —Ç–∞–±–ª–∏—Ü—ã
# # ===============================================================
# def choose_non_empty_table(cursor, tables, conn):
#     while True:
#         print("\nüìÑ –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:")
#         for idx, tbl in enumerate(tables, 1):
#             print(f"{idx}. {tbl}")
#
#         table_index = safe_choice(tables, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: ")
#         selected_table = tables[table_index]
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—É—Å—Ç–∞ –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
#         try:
#             cursor.execute(f"SELECT COUNT(*) FROM {selected_table}")
#             row_count = cursor.fetchone()[0]
#         except Error as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã '{selected_table}':", e)
#             continue
#
#         if row_count == 0:
#             print(f"\nüì≠ –¢–∞–±–ª–∏—Ü–∞ '{selected_table}' –ø—É—Å—Ç–∞ ‚Äî –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
#             retry = input("üîÅ –•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–∞–±–ª–∏—Ü—É? (y/n): ").lower()
#             if retry != 'y':
#                 print("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
#                 cursor.close()
#                 conn.close()
#                 exit()
#         else:
#             return selected_table
#
# # ===============================================================
# # 8. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
# # ===============================================================
#
# # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
# dbconfig = {
#     'host': 'ich-db.ccegls0svc9m.eu-central-1.rds.amazonaws.com',
#     'user': 'ich1',
#     'password': 'password',
#     'database': 'ich_edit'
# }
#
# # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# while True:
#     conn = connect_to_database(dbconfig)
#     # if not conn:
#     #     retry = input("üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é? (y/n): ").lower()
#     #     if retry == 'y':
#     #         dbconfig['host'] = input("–•–æ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: localhost): ")
#     #         dbconfig['user'] = input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ")
#     #         dbconfig['password'] = input("–ü–∞—Ä–æ–ª—å: ")
#     #         dbconfig['database'] = input("–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ")
#     #         continue
#     #     else:
#     #         print("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
#     #         exit()
#
#     cursor = conn.cursor()
#     tables = get_tables(cursor)
#     if not tables:
#         print("\nüì≠ –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
#         cursor.close()
#         conn.close()
#         exit()
#     break  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã
#
# # –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
# selected_table = choose_non_empty_table(cursor, tables, conn)
#
# # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
# field_info = get_fields(cursor, selected_table)
# fields = [row[0] for row in field_info]
# field_types = {row[0]: row[1] for row in field_info}
#
# print(f"\nüìÇ –¢–∞–±–ª–∏—Ü–∞: {selected_table}")
# print("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:")
# for idx, field in enumerate(fields, 1):
#     print(f"{idx}. {field} ({field_types[field]})")
#
# # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
# field_index = safe_choice(fields, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è: ")
# selected_field = fields[field_index]
# field_type = field_types[selected_field]
#
# print(f"\nüîç –ü–æ–ª–µ: {selected_field} (—Ç–∏–ø: {field_type})")
# value = parse_input_value(field_type)
# operator = choose_operator_for_type(field_type)
#
# # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–∏—Å–∫–æ–º –ø–æ —É—Å–ª–æ–≤–∏—é
# query = f"SELECT * FROM {selected_table} WHERE {selected_field} {operator} %s"
# try:
#     cursor.execute(query, (value,))
#     results = cursor.fetchall()
#     column_names = [desc[0] for desc in cursor.description]
#
#     print(f"\nüîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ '{selected_table}' –ø–æ —É—Å–ª–æ–≤–∏—é: {selected_field} {operator} {value}\n")
#     if results:
#         print(tabulate(results, headers=column_names, tablefmt="fancy_grid", stralign="center", numalign="center"))
#     else:
#         print("üö´ –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
# except Error as e:
#     print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", e)
#
# # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
# cursor.close()
# conn.close()
