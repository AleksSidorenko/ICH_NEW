"""
–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ich_edit —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã. Users —Å –ø–æ–ª—è–º–∏ (id, name, age),
Products —Å –ø–æ–ª—è–º–∏ (pid, prod, quantity) –∏ Sales —Å –ø–æ–ª—è–º–∏ (sid, id, pid).
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –µ–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ,
—á—Ç–æ —Ç–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç.
"""
# ---------------
# —Ä–∞–∑–Ω–æ–µ:
# ----------------
# query_table = """SELECT * FROM {}"""
#
# # query_col = """SELECT {} FROM {}""" - –∑–∞–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–≤–æ–¥ –ø–æ–ª—è –∏–ª–∏ –ø–æ–ª–µ–π
#
#
# if num_table in valid_tables.keys():
#     cursor.execute(query_table.format(valid_tables[num_table]))
#     column_names = [desc[0] for desc in cursor.description]
#     # –ó–∞–≥–æ–ª–æ–≤–∫–∏
#     for row in column_names:
#         print(f"{str(row):^8}", end="")
#     print()
#     print("-" * 70)
#     # for prod, qty, price in purchases:
#     #     print(f"{prod:<20} {qty:^12} {price:>12.2f}")
#     # i = 0
#     for row in cursor.fetchall():
#         # print(dict(zip(column_names, row)))
#         # print(tabulate(rows, headers=column_names, tablefmt="grid"))
#         for item in row:
#             print(f"{item:^8}", end="")
#         print()
#         # print(f'{str(row[i]):^8}', end="")
#         # i += 1
# else:
#     print(f"–¢–∞–±–ª–∏—Ü—ã {num_table} –Ω–µ—Ç.")
#
# cursor.close()
# conn.close()


# """
# -------------------------- –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
# import mysql.connector
#
# # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
# dbconfig = {
#     'host': 'ich-db.ccegls0svc9m.eu-central-1.rds.amazonaws.com',
#     'user': 'ich1',
#     'password': 'password',
#     'database': 'ich_edit'
# }
#
# # –°–ª–æ–≤–∞—Ä—å –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
# valid_tables = {
#     1: 'users',
#     2: 'product',
#     3: 'sales'
# }
#
# try:
#     # –ó–∞–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     num_table = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã (1. users, 2. product, 3. sales): "))
#
#     if num_table in valid_tables:
#         table_name = valid_tables[num_table]
#         query_table = f"SELECT * FROM {table_name}"
#
#         # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
#         conn = mysql.connector.connect(**dbconfig)
#         cursor = conn.cursor()
#         cursor.execute(query_table)
#
#         # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
#         column_names = [desc[0] for desc in cursor.description]
#         print("\n" + " | ".join(f"{col:^15}" for col in column_names))
#         print("-" * (len(column_names) * 18))
#
#         # –ü–µ—á–∞—Ç—å —Å—Ç—Ä–æ–∫
#         for row in cursor.fetchall():
#             print(" | ".join(f"{str(item):^15}" for item in row))
#
#         cursor.close()
#         conn.close()
#     else:
#         print("–¢–∞–±–ª–∏—Ü—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç.")
#
# except ValueError:
#     print("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.")
# except mysql.connector.Error as err:
#     print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {err}")


# --------------------------
# """


####### GPT
"""
import mysql.connector
from tabulate import tabulate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
dbconfig = {
    'host': 'ich-db.ccegls0svc9m.eu-central-1.rds.amazonaws.com',
    'user': 'ich1',
    'password': 'password',
    'database': 'ich_edit'
}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
valid_tables = {
    1: 'users',
    2: 'product',
    3: 'sales'
}

def main():
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
    for key, val in valid_tables.items():
        print(f"{key}. {val}")

    try:
        choice = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã (1-3): "))
        if choice not in valid_tables:
            print("‚ùå –¢–∞–±–ª–∏—Ü—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç.")
            return

        table_name = valid_tables[choice]
        query = f"SELECT * FROM {table_name}"

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        conn = mysql.connector.connect(**dbconfig)
        cursor = conn.cursor()
        cursor.execute(query)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        rows = cursor.fetchall()
        headers = [desc[0] for desc in cursor.description]

        # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
        print(f"\nüìÑ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table_name}:\n")
        if rows:
            print(tabulate(rows, headers=headers, tablefmt="grid"))
        else:
            print("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")

        cursor.close()
        conn.close()

    except ValueError:
        print("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.")
    except mysql.connector.Error as err:
        print(f"üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {err}")
    except Exception as e:
        print(f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
"""


### -----------------------------
"""
–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ich_edit —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã. 
Users —Å –ø–æ–ª—è–º–∏ (id, name, age), Products —Å –ø–æ–ª—è–º–∏ (pid, prod, quantity) 
–∏ Sales —Å –ø–æ–ª—è–º–∏ (sid, id, pid).
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∏–º–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users, 
–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
### -----------------------------

# import mysql.connector
#
# # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
# dbconfig = {
#     'host': 'ich-db.ccegls0svc9m.eu-central-1.rds.amazonaws.com',
#     'user': 'ich1',
#     'password': 'password',
#     'database': 'ich_edit'
# }
#
# # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
# try:
#     conn = mysql.connector.connect(**dbconfig)
#     cursor = conn.cursor()
# except mysql.connector.Error as err:
#     print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {err}")
#     exit(1)
#
# cursor.execute("SELECT id, name FROM users")
# users = cursor.fetchall()
#
# if not users:
#     print("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
# else:
#     print("\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
#     for i, (uid, name) in enumerate(users, start=1):
#         print(f"{i}. {name}")
#
#     selected_index = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –ø–æ–∫—É–ø–∫–∏: ")
#
#     if not selected_index.isdigit() or not (1 <= int(selected_index) <= len(users)):
#         print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
#     else:
#         selected_id, selected_name = users[int(selected_index) - 1]
#
#         # –ó–∞–ø—Ä–æ—Å –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         query = """
#         SELECT p.prod, p.quantity
#         FROM sales s
#         JOIN product p ON s.pid = p.pid
#         WHERE s.id = %s
#         """
#         cursor.execute(query, (selected_id,))
#         purchases = cursor.fetchall()
#
#         print(f"\n–ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_name}:")
#         if purchases:
#             print(f"{'–¢–æ–≤–∞—Ä':<20} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}")
#             print("-" * 30)
#             for prod, qty in purchases:
#                 print(f"{prod:<20} {qty}")
#         else:
#             print("–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫.")
#
# cursor.close()
# conn.close()
