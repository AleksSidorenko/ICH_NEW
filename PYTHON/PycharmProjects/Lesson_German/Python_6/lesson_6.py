"""
Aufgabe 4. Magische Methoden
Schreiben Sie eine Klasse Vektor,
die die Operationen Addition, Subtraktion
und Multiplikation mit einem Skalar unterstuÃàtzt,
indem die entsprechenden magischen Methoden uÃàberladen werden.
Testen Sie die Klasse mit verschiedenen Beispielen.
---------
–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å Vektor,
–∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–µ–Ω–∏—è, –≤—ã—á–∏—Ç–∞–Ω–∏—è
–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–∫–∞–ª—è—Ä,
–ø—É—Ç—ë–º –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤.
–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–ª–∞—Å—Å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö.
"""
### üß† **L√∂sungsmethode
"""
Um diese Aufgabe zu l√∂sen, m√ºssen wir eine eigene Klasse `Vektor` definieren,  
die sich wie ein mathematischer Vektor verh√§lt.  
Wir verwenden dazu **magische Methoden**,  
um die Operatoren `+`, `-` und `*` f√ºr unsere Objekte zu √ºberladen.

Jede dieser Operationen wird durch eine spezielle Methode dargestellt:
- `__add__` f√ºr Addition (`+`)
- `__sub__` f√ºr Subtraktion (`-`)
- `__mul__` f√ºr Skalarmultiplikation (`*`)

Diese Methoden erlauben es, dass Instanzen unserer Klasse mit den gewohnten Operatoren verwendet werden k√∂nnen,  
als w√§ren sie normale Zahlen oder Listen.  
Dabei achten wir darauf, dass:
- Zwei Vektoren nur dann addiert oder subtrahiert werden k√∂nnen, wenn sie gleich lang sind.
- Die Skalarmultiplikation mit einem einzelnen Zahlenwert durchgef√ºhrt wird.

Zus√§tzlich definieren wir die Methode `__repr__`,  
damit eine lesbare Darstellung des Objekts beim Ausgeben im Terminal oder bei `print()` erscheint.

Am Ende testen wir die Klasse mit verschiedenen Beispielen,  
um sicherzustellen, dass die Methoden korrekt funktionieren.
"""
#### üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:
"""
–ß—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É, –º—ã –¥–æ–ª–∂–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å `Vektor`,  
–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–µ–∫—Ç–æ—Ä.  
–î–ª—è —ç—Ç–æ–≥–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º **–º–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã**,  
—á—Ç–æ–±—ã –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã `+`, `-` –∏ `*` –¥–ª—è –Ω–∞—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤.

–ö–∞–∂–¥–∞—è –∏–∑ —ç—Ç–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º:
- `__add__` –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è (`+`)
- `__sub__` –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è (`-`)
- `__mul__` –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–∫–∞–ª—è—Ä (`*`)

–≠—Ç–∏ –º–µ—Ç–æ–¥—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –Ω–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ —Å –æ–±—ã—á–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏,  
–∫–∞–∫ –µ—Å–ª–∏ –±—ã –æ–Ω–∏ –±—ã–ª–∏ –æ–±—ã—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –∏–ª–∏ —Å–ø–∏—Å–∫–∞–º–∏.  
–ü—Ä–∏ —ç—Ç–æ–º –º—ã —Å–ª–µ–¥–∏–º –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã:
- –î–≤–∞ –≤–µ–∫—Ç–æ—Ä–∞ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏–ª–∏ –≤—ã—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã.
- –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–∫–∞–ª—è—Ä –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ `__repr__`,  
—á—Ç–æ–±—ã –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω –æ–±—ä–µ–∫—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–π —Ñ–æ—Ä–º–µ.

–í –∫–æ–Ω—Ü–µ –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö,  
—á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
"""
# class Vektor:
#     # DE: Konstruktor der Klasse. Er speichert die Vektordaten in einer Liste.
#     # RU: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞.
#     def __init__(self, daten):
#         self.daten = daten
#
#     # DE: Magische Methode f√ºr die Addition zweier Vektoren.
#     # Sie addiert die entsprechenden Elemente beider Vektoren.
#     # RU: –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤.
#     # –°–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±–æ–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤.
#     def __add__(self, anderer):
#         return Vektor([a + b for a, b in zip(self.daten, anderer.daten)])
#
#     # DE: Magische Methode f√ºr die Subtraktion zweier Vektoren.
#     # Jedes Element des zweiten Vektors wird vom entsprechenden Element des ersten abgezogen.
#     # RU: –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è –¥–≤—É—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤.
#     # –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ.
#     def __sub__(self, anderer):
#         return Vektor([a - b for a, b in zip(self.daten, anderer.daten)])
#
#     # DE: Magische Methode f√ºr die Multiplikation eines Vektors mit einem Skalar.
#     # Jedes Element des Vektors wird mit dem Skalar multipliziert.
#     # RU: –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞ –Ω–∞ —Å–∫–∞–ª—è—Ä.
#     # –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤–µ–∫—Ç–æ—Ä–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∫–∞–ª—è—Ä.
#     def __mul__(self, skalar):
#         return Vektor([a * skalar for a in self.daten])
#
#     # DE: Diese Methode wird verwendet, um eine gut lesbare Darstellung des Objekts zur√ºckzugeben.
#     # RU: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞.
#     def __repr__(self):
#         return f"Vektor({self.daten})"
#
#
# # DE: Beispielhafte Verwendung der Klasse:
# # RU: –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞:
#
# v1 = Vektor([1, 2, 3])  # DE: Erster Vektor / RU: –ü–µ—Ä–≤—ã–π –≤–µ–∫—Ç–æ—Ä
# v2 = Vektor([4, 5, 6])  # DE: Zweiter Vektor / RU: –í—Ç–æ—Ä–æ–π –≤–µ–∫—Ç–æ—Ä
#
# # DE: Vektoraddition ‚Äì Ergebnis ist ein neuer Vektor mit summierten Elementen.
# # RU: –°–ª–æ–∂–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç –Ω–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä —Å —Å—É–º–º–∞–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
# print(v1 + v2)  # Ausgabe: Vektor([5, 7, 9])
#
# # DE: Vektorsubtraktion ‚Äì Elementweises Abziehen.
# # RU: –í—ã—á–∏—Ç–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ ‚Äî –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ.
# print(v1 - v2)  # Ausgabe: Vektor([-3, -3, -3])
#
# # DE: Skalarmultiplikation ‚Äì Jedes Element wird mit 3 multipliziert.
# # RU: –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–∫–∞–ª—è—Ä ‚Äî –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 3.
# print(v1 * 3)   # Ausgabe: Vektor([3, 6, 9])
#
### ----------------------------------
"""
Aufgabe 5. RegulaÃàre AusdruÃàcke
Schreiben Sie ein Programm, 
das eine Zeichenkette mit Datumsangaben im Format TT-MM-JJJJ annimmt 
und diese mit regulaÃàren AusdruÃàcken in das Format JJJJ-MM-TT umwandelt.

** –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:**
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É,  
–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î-–ú–ú-–ì–ì–ì–ì`  
–∏ —Å –ø–æ–º–æ—â—å—é **—Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π** –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç `–ì–ì–ì–ì-–ú–ú-–î–î`.
"""

## üß† L√∂sungsmethode
"""
Um dieses Problem zu l√∂sen, verwenden wir die Bibliothek `re`,  
die regul√§re Ausdr√ºcke in Python unterst√ºtzt.  

Wir erstellen ein **regul√§res Muster**,  
das nach Daten im Format `TT-MM-JJJJ` sucht:  
- Zwei Ziffern f√ºr den Tag (`\d{2}`),  
- gefolgt von einem Bindestrich (`-`),  
- zwei Ziffern f√ºr den Monat (`\d{2}`),  
- einem weiteren Bindestrich,  
- und vier Ziffern f√ºr das Jahr (`\d{4}`).

Dann verwenden wir die Funktion `re.sub()`,  
um alle gefundenen Datumsangaben umzuwandeln.  
Dabei nutzen wir **Gruppen** in runden Klammern `()` im regul√§ren Ausdruck,  
damit wir in der Ersetzung (`replace`) die Reihenfolge √§ndern k√∂nnen:  
von `(\d{2})-(\d{2})-(\d{4})` zu `\3-\2-\1`.
"""
#### üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥:
"""
–ß—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å `re`,  
–∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ Python.  

–ú—ã —Å–æ–∑–¥–∞—ë–º **—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ**,  
–∫–æ—Ç–æ—Ä–æ–µ –∏—â–µ—Ç –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î-–ú–ú-–ì–ì–ì–ì`:  
- –¥–≤–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è –¥–Ω—è (`\d{2}`),  
- –∑–∞—Ç–µ–º –¥–µ—Ñ–∏—Å (`-`),  
- –¥–≤–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è –º–µ—Å—è—Ü–∞ (`\d{2}`),  
- –µ—â—ë –æ–¥–∏–Ω –¥–µ—Ñ–∏—Å,  
- –∏ —á–µ—Ç—ã—Ä–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è –≥–æ–¥–∞ (`\d{4}`).

–ó–∞—Ç–µ–º –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é `re.sub()`,  
—á—Ç–æ–±—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã.  
–ú—ã –ø—Ä–∏–º–µ–Ω—è–µ–º **–≥—Ä—É–ø–ø—ã** (–≤ –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–∫–∞—Ö `()`),  
—á—Ç–æ–±—ã –∑–∞—Ç–µ–º –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–º–µ–Ω—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫:  
–∏–∑ `(\d{2})-(\d{2})-(\d{4})` –ø–æ–ª—É—á–∞–µ–º `\3-\2-\1`.
"""
# import re  # DE: Importieren der Bibliothek f√ºr regul√§re Ausdr√ºcke
#            # RU: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
#
# # DE: Urspr√ºngliche Zeichenkette mit Datumsangaben im Format TT-MM-JJJJ
# # RU: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì
# text = "Heute ist der 13-04-2025 und morgen ist der 14-04-2025."
#
# # DE: Regul√§rer Ausdruck zur Erkennung des Datumsformats TT-MM-JJJJ:
# # Wir verwenden drei Gruppen:
# #   1. (\d{2}) ‚Äì genau zwei Ziffern f√ºr den Tag
# #   2. (\d{2}) ‚Äì genau zwei Ziffern f√ºr den Monat
# #   3. (\d{4}) ‚Äì genau vier Ziffern f√ºr das Jahr
# # RU: –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î-–ú–ú-–ì–ì–ì–ì:
# # –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∏ –≥—Ä—É–ø–ø—ã:
# #   1. (\d{2}) ‚Äì —Ä–æ–≤–Ω–æ –¥–≤–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è –¥–Ω—è
# #   2. (\d{2}) ‚Äì —Ä–æ–≤–Ω–æ –¥–≤–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è –º–µ—Å—è—Ü–∞
# #   3. (\d{4}) ‚Äì —Ä–æ–≤–Ω–æ —á–µ—Ç—ã—Ä–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è –≥–æ–¥–∞
# muster = r"(\d{2})-(\d{2})-(\d{4})"
#
# # DE: Umwandlung der gefundenen Daten mit re.sub()
# # \3 ‚Äì Jahr, \2 ‚Äì Monat, \1 ‚Äì Tag
# # Wir vertauschen die Reihenfolge, um das Format JJJJ-MM-TT zu erhalten
# # RU: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞—Ç —Å –ø–æ–º–æ—â—å—é re.sub()
# # \3 ‚Äì –≥–æ–¥, \2 ‚Äì –º–µ—Å—è—Ü, \1 ‚Äì –¥–µ–Ω—å
# # –ú—ã –º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î
# text_umgewandelt = re.sub(muster, r"\3-\2-\1", text)
#
# # DE: Ausgabe der umgewandelten Zeichenkette
# # RU: –í—ã–≤–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
# print(text_umgewandelt)
#
# ### üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:
# """
# Heute ist der 2025-04-13 und morgen ist der 2025-04-14.
# """
#### -------------
"""
Aufgabe 6. Grundlagen der Netzwerkprogrammierung
Erstellen Sie ein Programm, 
das eine GET-Anfrage an eine Website sendet und den Statuscode der Antwort ausgibt. 
Verwenden Sie die Bibliothek requests.

**–û—Å–Ω–æ–≤—ã —Å–µ—Ç–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:**

–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É,  
–∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç **GET-–∑–∞–ø—Ä–æ—Å** –Ω–∞ –≤–µ–±-—Å–∞–π—Ç  
–∏ –≤—ã–≤–æ–¥–∏—Ç **–∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞** –æ—Ç–≤–µ—Ç–∞.  
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É **`requests`**.
"""

"""
## üß† L√∂sungsmethode
#### üá©üá™ Deutsch:

Um diese Aufgabe zu l√∂sen, verwenden wir die externe Bibliothek `requests`,  
die die Arbeit mit HTTP-Anfragen in Python vereinfacht.

Zuerst importieren wir die Bibliothek.  
Dann definieren wir eine Ziel-URL als Zeichenkette (z.B. `"https://example.com"`).  
Mit der Methode `requests.get(URL)` senden wir eine HTTP-GET-Anfrage an diese Adresse.  
Die Methode gibt ein **Response-Objekt** zur√ºck.

Aus diesem Objekt k√∂nnen wir mit `.status_code`  
den **Statuscode der HTTP-Antwort** auslesen.  
Zum Beispiel:
- `200` bedeutet ‚ÄûOK‚Äú (alles in Ordnung),
- `404` bedeutet ‚ÄûNicht gefunden‚Äú,
- `500` ist ein Serverfehler usw.

Zum Schluss geben wir diesen Statuscode mit `print()` aus.
#### üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥:

–ß—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω—é—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É `requests`,  
–∫–æ—Ç–æ—Ä–∞—è —É–ø—Ä–æ—â–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å HTTP-–∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ Python.

–°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É.  
–ó–∞—Ç–µ–º –∑–∞–¥–∞—ë–º —Ü–µ–ª–µ–≤–æ–π URL –∫–∞–∫ —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `"https://example.com"`).  
–° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ `requests.get(URL)` –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º HTTP-–∑–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ GET –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É.  
–ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç **–æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞** (`Response`).

–ò–∑ —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å **—Å—Ç–∞—Ç—É—Å-–∫–æ–¥ HTTP-–æ—Ç–≤–µ—Ç–∞** —á–µ—Ä–µ–∑ `.status_code`.  
–ù–∞–ø—Ä–∏–º–µ—Ä:
- `200` –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–û–ö¬ª (—É—Å–ø–µ—à–Ω–æ),
- `404` –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–ù–µ –Ω–∞–π–¥–µ–Ω–æ¬ª,
- `500` ‚Äî –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç. –¥.

–í –∫–æ–Ω—Ü–µ –º—ã –≤—ã–≤–æ–¥–∏–º —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ —Å –ø–æ–º–æ—â—å—é `print()`.
"""

# # DE: Wir importieren die Bibliothek ‚Äûrequests‚Äú f√ºr HTTP-Anfragen
# # RU: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É ‚Äûrequests‚Äú –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
# import requests
#
# # DE: Wir definieren eine Ziel-URL als einfache Zeichenkette
# # RU: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π URL –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
# url = "https://example.com"
#
# # DE: Wir senden eine GET-Anfrage mit der Funktion requests.get()
# # Klammer auf: wir beginnen den Funktionsaufruf
# # Wir √ºbergeben die URL als Argument in Klammern
# # Klammer zu: der Aufruf ist abgeschlossen
# # RU: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ requests.get()
# # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
# # –ü–µ—Ä–µ–¥–∞—ë–º URL –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–∫–æ–±–∫–∞—Ö
# # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞
# antwort = requests.get(url)
#
# # DE: Wir greifen auf das Attribut ‚Äûstatus_code‚Äú des Antwortobjekts zu
# # RU: –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç—É ‚Äûstatus_code‚Äú –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–≤–µ—Ç–∞
# status = antwort.status_code
#
# # DE: Wir geben den Statuscode mit print() aus
# # Klammer auf: wir beginnen die Ausgabe
# # Klammer zu: Ausgabe abschlie√üen
# # RU: –í—ã–≤–æ–¥–∏–º –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å –ø–æ–º–æ—â—å—é print()
# # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –≤—ã–≤–æ–¥
# # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–≤–æ–¥
# print("Statuscode der Antwort:", status)
#
#
# ### üß™ –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
# # Statuscode der Antwort: 200

"""
Aufgabe 7. Mehrmodulige Programme, Web-Scraping
Schreiben Sie ein Programm, 
das das Modul BeautifulSoup importiert und verwendet, 
um eine bestimmte Webseite zu analysieren. 
Das Programm soll den Titel der Seite ausgeben.

**–ú–Ω–æ–≥–æ–º–æ–¥—É–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, Web-Scraping:**

–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É,  
–∫–æ—Ç–æ—Ä–∞—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å **BeautifulSoup**  
–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞.  
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ **–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã**.
"""
"""
## L√∂sungsmethode 
#### üá©üá™ Deutsch:

F√ºr diese Aufgabe verwenden wir zwei externe Bibliotheken:
- `requests`, um den HTML-Inhalt der Webseite abzurufen,
- `bs4` (BeautifulSoup), um den HTML-Code zu analysieren.

Zuerst importieren wir die Module: `requests` f√ºr den Abruf und `BeautifulSoup` aus `bs4` f√ºr das Parsen.

Wir definieren eine Ziel-URL, z.B. `"https://example.com"`.  
Mit `requests.get()` senden wir eine **HTTP-GET-Anfrage**,  
und erhalten als Antwort den HTML-Code der Seite.

Diesen HTML-Code √ºbergeben wir an den **Konstruktor** von `BeautifulSoup`,  
zusammen mit dem Parser `"html.parser"`.

Mit `soup.title` oder `soup.title.string` greifen wir auf den `<title>`-Tag zu  
und geben den Text des Seitentitels mit `print()` aus.
#### üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥:

–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–µ –≤–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
- `requests` ‚Äî –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã,
- `bs4` (BeautifulSoup) ‚Äî –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ HTML-–∫–æ–¥–∞.

–°–Ω–∞—á–∞–ª–∞ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏: `requests` ‚Äî –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã,  
–∞ `BeautifulSoup` –∏–∑ `bs4` ‚Äî –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∞–Ω–∞–ª–∏–∑–∞) HTML.

–ó–∞—Ç–µ–º –∑–∞–¥–∞—ë–º URL —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, `"https://example.com"`.  
–° –ø–æ–º–æ—â—å—é `requests.get()` –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º **HTTP-–∑–∞–ø—Ä–æ—Å**  
–∏ –ø–æ–ª—É—á–∞–µ–º HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –æ—Ç–≤–µ—Ç–µ.

–≠—Ç–æ—Ç HTML-–∫–æ–¥ –º—ã –ø–µ—Ä–µ–¥–∞—ë–º **–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä** `BeautifulSoup`  
–≤–º–µ—Å—Ç–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–∞—Ä—Å–µ—Ä–∞ `"html.parser"`.

–° –ø–æ–º–æ—â—å—é `soup.title` –∏–ª–∏ `soup.title.string` –º—ã –ø–æ–ª—É—á–∞–µ–º —Ç–µ–≥ `<title>`  
–∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é `print()`.
"""
## ‚úÖ

# # DE: Wir importieren die Bibliothek ‚Äûrequests‚Äú, um den HTML-Inhalt herunterzuladen
# # RU: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É ‚Äûrequests‚Äú –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
# import requests
#
# # DE: Wir importieren die Klasse BeautifulSoup aus dem Modul bs4
# # RU: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å BeautifulSoup –∏–∑ –º–æ–¥—É–ª—è bs4
# from bs4 import BeautifulSoup
#
# # DE: Wir definieren die Ziel-URL als Zeichenkette
# # RU: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π URL –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
# url = "https://example.com"
#
# # DE: Wir senden eine GET-Anfrage mit requests.get()
# # Klammer auf ‚Äî Beginn des Funktionsaufrufs
# # √úbergabe der URL als Argument
# # Klammer zu ‚Äî Funktionsaufruf abgeschlossen
# # RU: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é requests.get()
# # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É ‚Äî –Ω–∞—á–∞–ª–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
# # –ü–µ—Ä–µ–¥–∞—ë–º URL –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
# # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞
# antwort = requests.get(url)
#
# # DE: Wir holen den HTML-Inhalt mit .text
# # RU: –ü–æ–ª—É—á–∞–µ–º HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ .text
# html_inhalt = antwort.text
#
# # DE: Wir analysieren den HTML-Inhalt mit BeautifulSoup
# # Klammer auf: Beginn des Objektaufbaus
# # Zwei Argumente:
# #   1. HTML-Inhalt
# #   2. Parser-Typ "html.parser"
# # Klammer zu: Objekt wird erstellt
# # RU: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML —Å –ø–æ–º–æ—â—å—é BeautifulSoup
# # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
# # –î–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
# #   1. HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
# #   2. –¢–∏–ø –ø–∞—Ä—Å–µ—Ä–∞ "html.parser"
# # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É ‚Äî –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω
# soup = BeautifulSoup(html_inhalt, "html.parser")
#
# # DE: Wir greifen auf den <title>-Tag zu
# # RU: –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–≥—É <title>
# seitentitel = soup.title.string
#
# # DE: Wir geben den Seitentitel mit print() aus
# # RU: –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ print()
# print("Seitentitel:", seitentitel)
#
# ### üß™ –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
# # Seitentitel: Example Domain
