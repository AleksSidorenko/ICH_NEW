15:32:28 –û—Ç Stanislav M. –¥–æ –í—Å–µ:
	'''
	Schreiben Sie einen Generator, der vom Benutzer Anfangs- und Endwerte annimmt und nur gerade Zahlen im
	angegebenen Bereich generiert. Verwenden Sie diesen Generator, um alle geraden Zahlen vom Anfangs- bis zum
	Endwert auszugeben.
	'''
	
15:45:42 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	–ë—ã–∫ —Ç—É–ø–æ–≥—É–± —Ç—É–ø–æ–≥—É–±–µ–Ω—å–∫–∏–π –±—ã—á–æ–∫ —É –±—ã–∫–∞ –±–µ–ª–∞ –≥—É–±–∞ –±—ã–ª–∞ —Ç—É–ø–∞
	
15:47:46 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	Loesung
	
15:49:36 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	√Ñ - AE
	
15:57:46 –û—Ç Stanislav M. –¥–æ –í—Å–µ:
	Die_1__Unterrichtsstrunde_txt.txt
	
15:58:29 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	Die Funktion aufrufen - –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
	Oleksii Starodubov:üëç
	
15:59:59 –û—Ç Olha Dvornyk –¥–æ –í—Å–µ:
	from collections import Counter
	
16:00:26 –û—Ç Olena Marshalova –¥–æ –í—Å–µ:
	schleife
	
16:00:30 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	Die Schleife - cycle
	
16:01:17 –û—Ç Oleksii Starodubov –¥–æ –í—Å–µ:
	Zyklus geht nicht?
	
16:01:59 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	Die FOR-Schleife
	
16:13:12 –û—Ç Vadym Prudnikov –¥–æ –í—Å–µ:
	def zeichne_kette(text):
	    result = {}
	    for zeichen in text:
	        if zeichen not in result:
	            result[zeichen] = 1
	        else:
	            result[zeichen] += 1
	    return result
	
	
	zeichenkette_von_benutzer = input("Geben Sie einen text ein: ")
	print(zeichne_kette(zeichenkette_von_benutzer))
	
16:16:19 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	result[zeichen] = result.get(Zeichen, 0) + 1
	
16:16:24 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	Return ...
	
16:33:08 –û—Ç Maksym Poliakov –¥–æ –í—Å–µ:
	int(num)%2
	
16:34:32 –û—Ç Stanislav M. –¥–æ –í—Å–µ:
	from typing import Generator
	def rng_generator(number, return_num):
	    while return_num != number + 1:
	        yield return_num # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –º–∞–∫—Å–∏–º—É–º —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–ª–∏
	        return_num += 1
	
	def even_numbers(start: float, end: float) -> Generator[float, float, float]:
	    for num in rng_generator(end-1, start):
	        if num % 2 == 0:
	            yield num
	
	
	# start_value = int(input("Enter the start value: "))
	# end_value = int(input("Enter the end value: "))
	start_value = 10.14
	end_value = 15.17
	res = even_numbers(start_value, end_value)
	# for even_num in res:
	#     print(even_num)
	[print(next(res, 'Odd')) for _ in rng_generator(end_value-1, start_value)]
	#[print(num) for num in res]
	
16:40:34 –û—Ç Maksym Poliakov –¥–æ –í—Å–µ:
	from typing import Generator
	def rng_generator(number, return_num):
	    while return_num != number + 1:
	        yield return_num # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –º–∞–∫—Å–∏–º—É–º —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–ª–∏
	        return_num += 1
	
	def even_numbers(start: float, end: float) -> Generator[float, float, float]:
	    for num in rng_generator(end-1, start):
	        if num % 2 == 0:
	            yield num
	
	
	# start_value = int(input("Enter the start value: "))
	# end_value = int(input("Enter the end value: "))
	start_value = 10.14
	end_value = 15.17
	res = even_numbers(start_value, end_value)
	# for even_num in res:
	#     print(even_num)
	[print(next(res, 'Odd')) for _ in rng_generator(end_value-1, start_value)]
	#[print(num) for num in res]
	—ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å float –µ–π –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ int
	if num % 2 == 0: 
	
16:47:55 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	Aufgabe 6: Einf√ºhrung in funktionale Programmierung
	Schreiben Sie eine Funktion, die eine Liste von Zeichenketten entgegennimmt und nur diejenigen Zeichenketten zur√ºckgibt, die mehr als 5 Zeichen enthalten. Verwenden Sie daf√ºr die Funktion Filter.
	
16:49:38 –û—Ç Alla Vinogradova –¥–æ Alex Sidorenko (–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):
	Schicks du den Code bitte?
	
16:50:16 –û—Ç Alex Sidorenko –¥–æ Alla Vinogradova (–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):
	# Erstellen Sie ein Programm, das zwei Zahlen vom Benutzer annimmt
	# und eine Division durchfuÃàhrt.
	# Wenn der Benutzer Null als Divisor eingibt, sollte das Programm eine Fehlermeldung ausgeben
	# und um die Eingabe eines anderen Divisors bitten.
	
	var1 = int(input("Geben Sie eine Zahl ein: "))
	var2 = int(input("Geben Sie die zweite Zahl ein: "))
	
	try:
	    result = var1 / var2
	    print(result)
	except ZeroDivisionError as e:
	    print(e)
	Alla Vinogradova:üëçüèª
	
16:51:32 –û—Ç Stanislav M. –¥–æ –í—Å–µ:
	from typing import Generator
	def rng_generator(number, return_num):
	    number = int(number)
	    return_num = int(return_num)
	    while return_num != number + 1:
	        yield return_num
	        return_num += 1
	
	def even_numbers(start: int, end: int) -> Generator[int, None, None]:
	    for num in rng_generator(end-1, start):
	        if num % 2 == 0:
	            yield num
	
	# start_value = int(input("Enter the start value: "))
	# end_value = int(input("Enter the end value: "))
	start_value = 10.14
	end_value = 15.17
	res = even_numbers(start_value, end_value)
	# for even_num in res:
	#     print(even_num)
	#[print(next(res, 'Odd')) for _ in rng_generator(start_value, end_value-1)]
	[print(num) for num in res]
	
16:52:06 –û—Ç Stanislav M. –¥–æ –í—Å–µ:
	Anders geht nicht, mit floats zu arbeiten ist sinnlos
	
16:55:20 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	beispiel_liste = ["Python", "ist", "eine", "gro√üartige", "Programmiersprache"]
	
16:58:33 –û—Ç Olha Dvornyk –¥–æ –í—Å–µ:
	def filter_length_str(list):
	    return [word for word in list if len(word) > 5 ]
	
	beispiel_liste = ["Python", "ist", "eine", "gro√üartige", "Programmiersprache"]
	print(filter_length_str(beispiel_liste))
	
16:59:12 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	return list(filter(lambda s:
	
