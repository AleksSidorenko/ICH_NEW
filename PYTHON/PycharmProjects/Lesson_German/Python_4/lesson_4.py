"""
‚ùó √úbung 1:
1. Verwenden Sie collections.Counter,
um die Anzahl jedes Zeichens in einer Zeichenkette zu zaÃàhlen.
Schreiben Sie eine Funktion count_characters, die eine Zeichenkette annimmt
und ein Counter-Objekt mit der Anzahl der einzelnen Zeichen zuruÃàckgibt.
Geben Sie anschlie√üend die 3 am haÃàufigsten vorkommenden Zeichen aus.
L√∂sung:
Zeichen z√§hlen mit Counter
–ó–∞–¥–∞—á–∞: –ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ –∏ –≤—ã–≤–µ—Å—Ç–∏ 3 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö.
"""
# from collections import Counter
"""
DE: Wir importieren Counter aus dem Modul collections.
RU: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Counter –∏–∑ –º–æ–¥—É–ª—è collections.
DE: Counter ist eine spezielle Datenstruktur aus dem Modul collections, 
die automatisch die H√§ufigkeit von Elementen z√§hlt.
RU: Counter ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ –º–æ–¥—É–ª—è collections, 
–∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
Warum benutzen wir Counter? / –ü–æ—á–µ–º—É –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Counter?
DE: Counter erleichtert das Z√§hlen von Zeichen oder W√∂rtern.
Anstatt eine eigene Z√§hllogik mit Schleifen zu schreiben, gen√ºgt ein einfacher Funktionsaufruf.
Die Methode most_common(n) gibt die n h√§ufigsten Elemente direkt zur√ºck.
RU: Counter —É–ø—Ä–æ—â–∞–µ—Ç –ø–æ–¥—Å—á—ë—Ç —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —Å–ª–æ–≤.
–í–º–µ—Å—Ç–æ —Ä—É—á–Ω–æ–≥–æ —Å—á—ë—Ç–∞ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª—ã –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É.
–ú–µ—Ç–æ–¥ most_common(n) —Å—Ä–∞–∑—É –≤—ã–¥–∞—ë—Ç n —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
Zusammenfassung / –ò—Ç–æ–≥:
Counter spart Zeit und Code beim Z√§hlen und ist die ideale L√∂sung 
f√ºr statistische Auswertungen von Zeichen.
"""
# def count_characters(text):
#     counter = Counter(text)
#     return counter
"""
DE: Wir definieren eine Funktion count_characters,
die einen Text (eine Zeichenkette) als Parameter nimmt.
Mit Counter(text) z√§hlen wir, wie oft jedes Zeichen vorkommt.
Das Ergebnis wird zur√ºckgegeben.
RU: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é count_characters, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é —Å—Ç—Ä–æ–∫—É.
–° –ø–æ–º–æ—â—å—é Counter(text) —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.
–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""
# text = "collections in python are very useful"
# counter = count_characters(text)
# print("Top 3 h√§ufigste Zeichen:", counter.most_common(3))
"""
DE: Wir rufen die Funktion mit einer Beispielzeichenkette auf.
most_common(3) gibt die 3 h√§ufigsten Zeichen zur√ºck.
Das Ergebnis wird ausgegeben.
RU: –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.
most_common(3) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 3 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–∏–º–≤–æ–ª–∞.
–ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""

"""
2. Verwenden Sie collections.deque, um eine Warteschlange mit fester LaÃànge zu erstellen.
Schreiben Sie eine Funktion fixed_queue, die eine Liste von Zahlen
und die maximale LaÃànge der Warteschlange annimmt,
die Elemente der Liste zur Warteschlange hinzufuÃàgt
und den endguÃàltigen Zustand der Warteschlange zuruÃàckgibt.

** –ó–∞–¥–∞–Ω–∏–µ: **
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `collections.deque`, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å ** –æ—á–µ—Ä–µ–¥—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã **.
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `fixed_queue`, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ** —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª ** –∏ ** –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é
–¥–ª–∏–Ω—É –æ—á–µ—Ä–µ–¥–∏ **, –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ** –∏—Ç–æ–≥–æ–≤–æ–µ
—Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ **.
## üß† L√∂sungsmethode 
#### üá©üá™ Deutsch:
Zur L√∂sung dieser Aufgabe verwenden wir die Klasse `deque` aus dem Modul `collections`.
Ein `deque`(double - ended queue) erlaubt das ** Hinzuf√ºgen und
Entfernen ** von Elementen an beiden Enden ‚Äî vorne und hinten.
Wenn wir ein `deque` - Objekt mit dem Parameter `maxlen = N ` erstellen,
dann bleibt seine L√§nge ** automatisch begrenzt auf `N` **.
Wird ein neues Element hinzugef√ºgt, w√§hrend die maximale L√§nge erreicht ist,
wird das ** √§lteste Element(ganz vorne) ** automatisch entfernt.
Wir definieren eine Funktion `fixed_queue(liste, max_len)`,
die alle Elemente aus der Liste `liste` in die Queue einf√ºgt,
und schlie√ülich die aktuelle Queue als Liste zur√ºckgibt.
#### üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥:
–î–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å deque –∏–∑ –º–æ–¥—É–ª—è collections.
deque (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å) –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏ 
—É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω ‚Äî —Å –Ω–∞—á–∞–ª–∞ –∏ —Å –∫–æ–Ω—Ü–∞.
–ï—Å–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç deque —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º maxlen=N,
–µ–≥–æ –¥–ª–∏–Ω–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ N.
–ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –¥–ª–∏–Ω–µ,
—Ç–æ —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç (–≤ –Ω–∞—á–∞–ª–µ) –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—ë–Ω.
–ú—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏—é fixed_queue(liste, max_len),
–∫–æ—Ç–æ—Ä–∞—è –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ liste –≤ –æ—á–µ—Ä–µ–¥—å,
–∞ –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞.
## ‚úÖ 
# DE: Wir importieren die Klasse deque aus dem Modul collections
# RU: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å deque –∏–∑ –º–æ–¥—É–ª—è collections
from collections import deque


# DE: Wir definieren eine Funktion mit zwei Parametern:
#   1. liste ‚Äì die Eingangsdaten (Liste von Zahlen)
#   2. max_len ‚Äì maximale L√§nge der Warteschlange
# RU: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
#   1. liste ‚Äì –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª)
#   2. max_len ‚Äì –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—á–µ—Ä–µ–¥–∏
def fixed_queue(liste, max_len):
    # DE: Wir erstellen ein deque-Objekt mit fester L√§nge
    # Klammer auf: Konstruktoraufruf
    # maxlen=max_len ‚Äì Begrenzung der L√§nge
    # Klammer zu: Objekt ist erstellt
    # RU: –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç deque —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω–æ–π
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É: –≤—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    # maxlen=max_len ‚Äì –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É: –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω
    queue = deque(maxlen=max_len)

    # DE: Wir f√ºgen alle Elemente der Liste zur Queue hinzu
    # RU: –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å
    for element in liste:
        # DE: Append f√ºgt das Element ans Ende der Queue an
        # Wenn die maximale L√§nge erreicht ist, wird das vorderste Element entfernt
        # RU: append –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏
        # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞, —Ç–æ –ø–µ—Ä–≤—ã–π (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π) —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª—è–µ—Ç—Å—è
        queue.append(element)

    # DE: Wir geben den endg√ºltigen Zustand der Queue als Liste zur√ºck
    # RU: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∫ —Å–ø–∏—Å–æ–∫
    return list(queue)

### üß™ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

zahlen = [1, 2, 3, 4, 5]
maximale_laenge = 3
print(fixed_queue(zahlen, maximale_laenge))

### ‚úÖ –í—ã–≤–æ–¥: [3, 4, 5]


"""
"""
3. Verwenden Sie collections.defaultdict, um ein WoÃàrterbuch zu erstellen,
bei dem jeder SchluÃàssel mehrere Werte haben kann (zum Beispiel eine Liste).
Schreiben Sie eine Funktion group_by_first_letter,
die eine Liste von WoÃàrtern annimmt und sie nach dem ersten Buchstaben gruppiert,
wobei defaultdict verwendet wird.
L√∂sung:
W√∂rter gruppieren mit defaultdict
–ó–∞–¥–∞—á–∞: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ.
"""
# from collections import defaultdict
"""
DE: Wir importieren defaultdict.
RU: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º defaultdict.
DE: defaultdict ist ein Dictionary, das automatisch Standardwerte f√ºr neue Schl√ºssel erzeugt.
RU: defaultdict ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π.
Warum benutzen wir defaultdict(list)? / –ü–æ—á–µ–º—É –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º defaultdict(list)?
DE: Bei normalem dict m√ºssten wir pr√ºfen, ob ein Schl√ºssel existiert, bevor wir Werte hinzuf√ºgen.
Mit defaultdict(list) entf√§llt diese Pr√ºfung, da beim ersten Zugriff 
auf einen neuen Schl√ºssel eine leere Liste erstellt wird.
Ideal zum Gruppieren von Elementen (z.B. nach Anfangsbuchstaben).
RU: –í –æ–±—ã—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è.
defaultdict(list) —Å–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–æ–≤–æ–º—É –∫–ª—é—á—É.
–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ).
Zusammenfassung / –ò—Ç–æ–≥:
defaultdict ist elegant und effizient f√ºr Aufgaben mit Gruppenbildung oder mehrwertigen Schl√ºsseln.
"""
# def group_by_first_letter(words):
#     grouped = defaultdict(list)
#     for word in words:
#         if word:
#             first_letter = word[0].lower()
#             grouped[first_letter].append(word)
#     return grouped
"""
DE: Funktion erh√§lt eine Liste von W√∂rtern.
Wir erstellen ein defaultdict, das Listen als Standardwert verwendet.
F√ºr jedes Wort pr√ºfen wir, ob es nicht leer ist.
Der erste Buchstabe (kleingeschrieben) wird als Schl√ºssel genutzt.
Das Wort wird der passenden Liste hinzugef√ºgt.
Am Ende geben wir das gruppierte Dictionary zur√ºck.
RU: –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤.
–°–æ–∑–¥–∞—ë–º defaultdict, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å–ø–∏—Å–∫–∏.
–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ (–µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ) –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É.
–ü—Ä–∏–≤–æ–¥–∏–º –µ—ë –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –∫–ª—é—á.
–î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫.
–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.
"""
# words = ["Apfel", "Banane", "Avocado", "Birne", "Ananas", "Brombeere"]
# grouped_words = group_by_first_letter(words)
# for letter, group in grouped_words.items():
#     print(f"{letter}: {group}")
"""
DE: Wir testen die Funktion mit deutschen Fruchtnamen. Die Ausgabe zeigt Gruppen nach Anfangsbuchstaben.
RU: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ñ—Ä—É–∫—Ç–æ–≤. –ù–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ.
"""


"""
4. Erstellen Sie ein benanntes Tupel Point mit den Feldern x, y und z.
Schreiben Sie eine Funktion calculate_distance, die zwei PointÓÇàObjekte annimmt
und den Abstand zwischen ihnen im dreidimensionalen Raum berechnet.
L√∂sung:
Abstand im Raum mit namedtuple
–ó–∞–¥–∞—á–∞: –í—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ 3D.
"""
# from collections import namedtuple
# from math import sqrt
"""DE: Wir importieren namedtuple f√ºr strukturierte Daten und sqrt f√ºr die Wurzel.
RU: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º namedtuple –∏ sqrt –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—Ä–Ω—è.
DE: namedtuple erstellt leichtgewichtige, unver√§nderliche Objekte mit benannten Feldern ‚Äì wie Klassen, 
aber kompakter.
RU: namedtuple —Å–æ–∑–¥–∞—ë—Ç –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–µ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ ‚Äî –∫–∞–∫ –∫–ª–∞—Å—Å—ã, –Ω–æ –ø—Ä–æ—â–µ.
Warum benutzen wir namedtuple("Point", ["x", "y", "z"])? / –ü–æ—á–µ–º—É –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º namedtuple("Point", ["x", "y", "z"])?
DE: Wir brauchen strukturierte Daten f√ºr Punkte im Raum (x, y, z).
Mit namedtuple k√∂nnen wir auf die Koordinaten leserlich mit punkt.x, punkt.y usw. zugreifen.
Es ist klarer und sicherer als die Verwendung einfacher Tupel (x, y, z).
RU: –î–ª—è —Ç–æ—á–µ–∫ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –Ω—É–∂–Ω—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (x, y, z).
–° namedtuple –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ø–æ–Ω—è—Ç–Ω–æ: punkt.x, punkt.y –∏ —Ç.‚ÄØ–¥.
–≠—Ç–æ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ, —á–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ—Ä—Ç–µ–∂–∏.
Zusammenfassung / –ò—Ç–æ–≥:
namedtuple ist ideal f√ºr kleine strukturierte Datentypen wie Koordinaten 
oder Vektoren ‚Äì leserlich, effizient, pythonisch.
"""
# Point = namedtuple("Point", ["x", "y", "z"])
"""DE: Wir erstellen eine Struktur Point mit 3 Koordinaten: x, y, z.
namedtuple erlaubt uns, lesbaren Code mit Punktnotation zu schreiben.
RU: –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Point —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ x, y, z.
–° namedtuple –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ø–æ–ª—è–º –∫–∞–∫ –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º."""
# def calculate_distance(p1, p2):
#     return sqrt((p2.x - p1.x)**2 + (p2.y - p1.y)**2 + (p2.z - p1.z)**2)
"""DE: Die Funktion berechnet den euklidischen Abstand zwischen zwei Punkten.
Die Formel: ‚àö[(x‚ÇÇ‚àíx‚ÇÅ)¬≤ + (y‚ÇÇ‚àíy‚ÇÅ)¬≤ + (z‚ÇÇ‚àíz‚ÇÅ)¬≤]"""
""" RU: –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ 3D."""
# point1 = Point(1, 2, 3)
# point2 = Point(4, 6, 8)
# print("Abstand zwischen den Punkten:", calculate_distance(point1, point2))
""" DE: Wir testen die Funktion mit zwei Punkten. Die Ausgabe ist das berechnete Ergebnis.
RU: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –¥–≤—É—Ö —Ç–æ—á–∫–∞—Ö. –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–∏–º–∏. """

"""
UÃàbung 2.
1. Schreiben Sie eine Funktion safe_divide, 
die zwei Zahlen annimmt und das Ergebnis ihrer Division zuruÃàckgibt. 
Wenn die Division nicht moÃàglich ist (Division durch Null), 
soll die Funktion die Meldung "Cannot divide by zero" zuruÃàckgeben, 
ohne die AusfuÃàhrung des Programms zu unterbrechen.
"""
# def safe_divide(a, b):
#     try:
#         return a / b
#     except ZeroDivisionError:
#         return "Cannot divide by zero"
#
# print(safe_divide(1, 2))
# print(safe_divide(1, 0))
"""
DE: Wir definieren die Funktion safe_divide, die zwei Zahlen a und b annimmt.
Im try-Block versuchen wir, a durch b zu teilen.
Falls b = 0, wird eine ZeroDivisionError-Ausnahme ausgel√∂st.
Diese fangen wir im except-Block ab und geben eine freundliche Fehlermeldung zur√ºck.
RU: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é safe_divide, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –¥–≤–∞ —á–∏—Å–ª–∞ a –∏ b.
–í –±–ª–æ–∫–µ try –ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ª–µ–Ω–∏–µ a / b.
–ï—Å–ª–∏ b = 0, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ZeroDivisionError.
–í –±–ª–æ–∫–µ except –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
"""

"""
2. Schreiben Sie eine Funktion read_file, die versucht, eine Textdatei zu oÃàffnen und zu lesen. 
Wenn die Datei nicht existiert, soll die Funktion den Fehler FileNotFoundError behandeln 
und die Meldung "File not found" ausgeben. 
Im Falle anderer Fehler soll die Meldung "An error occurred" ausgegeben werden.
"""
# def read_file(filename):
#     try:
#         with open(filename, 'r') as file:
#             return file.read()
#     except FileNotFoundError:
#         return "File not found"
#     except Exception:
#         return "An error occurred"
#
# f = read_file("test.txt")
# print(f)
"""
DE:
Die Funktion read_file nimmt den Dateinamen als Parameter.
Im try-Block √∂ffnen wir die Datei im Lesemodus ('r').
Wenn die Datei existiert, lesen wir ihren Inhalt mit read() und geben ihn zur√ºck.
Falls die Datei nicht existiert, wird FileNotFoundError ausgel√∂st ‚Äì wir geben "File not found" zur√ºck.
Andere unerwartete Fehler (z.‚ÄØB. Berechtigungen, Kodierung) fangen wir mit Exception ab.
RU:
–§—É–Ω–∫—Ü–∏—è read_file –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞.
–í –±–ª–æ–∫–µ try –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ —á—Ç–µ–Ω–∏—è ('r').
–ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —á–∏—Ç–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º.
–ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–Ω–∏–∫–∞–µ—Ç FileNotFoundError, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "File not found".
–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞) –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Exception.
"""

"""
3. Schreiben Sie eine Funktion get_integer, die den Benutzer auffordert, eine Zahl einzugeben. 
Wenn der Benutzer keine ganze Zahl eingibt, soll die Funktion die Ausnahme ValueError behandeln 
und die Eingabe erneut abfragen, bis ein guÃàltiger Wert eingegeben wird.
"""
# def get_integer():
#     while True:
#         try:
#             value = int(input("Bitte geben Sie eine ganze Zahl ein: "))
#             return value
#         except ValueError:
#             print("Ung√ºltige Eingabe. Bitte versuchen Sie es erneut.")
#
# get_integer()
"""
DE:
Die Funktion fordert den Benutzer im while True-Block zur Eingabe auf.
Wir versuchen, die Eingabe mit int() in eine ganze Zahl umzuwandeln.
Falls der Benutzer etwas Ung√ºltiges eingibt (z.‚ÄØB. Buchstaben), wird ValueError ausgel√∂st.
Der Fehler wird abgefangen, und die Schleife wiederholt sich, bis eine g√ºltige Zahl eingegeben wird.
RU:
–§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª while True, —á—Ç–æ–±—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤–≤–æ–¥.
–° –ø–æ–º–æ—â—å—é int() –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.
–ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—É–∫–≤—ã) ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è ValueError.
–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–¥—ë—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.
"""

"""
4. Schreiben Sie eine Funktion calculate_square_root, die eine Zahl annimmt 
und deren Quadratwurzel zuruÃàckgibt. Wenn die Zahl negativ ist, soll eine Ausnahme
ValueError ausgeloÃàst werden. Behandeln Sie die Ausnahme 
und geben Sie die Meldung "Cannot calculate the square root of a negative number" zuruÃàck.
"""
# from math import sqrt
#
# def calculate_square_root(x):
#     try:
#         if x < 0:
#             raise ValueError("Negative Zahl")
#         return sqrt(x)
#     except ValueError:
#         return "Cannot calculate the square root of a negative number"
#
# calculated_square_root = calculate_square_root(-1)
# print(calculated_square_root)
"""
DE:
Wir importieren sqrt aus dem math-Modul f√ºr die Quadratwurzel.
Die Funktion calculate_square_root pr√ºft, ob x negativ ist.
Wenn ja, l√∂sen wir manuell ValueError aus.
Die Wurzelberechnung erfolgt nur bei g√ºltigen (nicht-negativen) Zahlen.
Im except-Block behandeln wir negative Eingaben mit einer Fehlermeldung.
RU:
–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º sqrt –∏–∑ –º–æ–¥—É–ª—è math –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—Ä–Ω—è.
–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ x –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.
–ï—Å–ª–∏ —á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ ‚Äî –≤—Ä—É—á–Ω—É—é –≤—ã–∑—ã–≤–∞–µ–º ValueError.
–ö–æ—Ä–µ–Ω—å –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
–í –±–ª–æ–∫–µ except –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
üì¶ Verwendete Module:
from math import sqrt
DE: math.sqrt ist notwendig, um die Quadratwurzel korrekt zu berechnen.
RU: math.sqrt –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è.
"""
"""
UÃàbung 3:
1. Erstellen Sie einen Generator RangeIterator, der einen Iterator implementiert, 
der aÃàhnlich wie die eingebaute Funktion range() funktioniert. 
Der Generator soll einen Startwert, einen Endwert und einen Schrittwert annehmen, 
uÃàber die Werte iterieren und die Iteration beenden, wenn das Ende des Bereichs erreicht ist.
--------
DE: Wir definieren eine Klasse RangeIterator, die das Verhalten der range-Funktion nachbildet.
RU: –ú—ã —Å–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å RangeIterator, –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ range.
__init__ speichert Start-, End- und Schrittwert.
RU: –ú–µ—Ç–æ–¥ __init__ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ–Ω–µ—Ü –∏ —à–∞–≥.
__iter__ gibt das Objekt selbst zur√ºck (erforderlich f√ºr Iteration).
RU: –ú–µ—Ç–æ–¥ __iter__ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º –æ–±—ä–µ–∫—Ç ‚Äî —ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ–Ω —Å—Ç–∞–ª –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º.
__next__ erh√∂ht den Wert um den Schritt, bis zum Ende.
RU: –ú–µ—Ç–æ–¥ __next__ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –∫–æ–Ω—Ü–∞.
"""
# class RangeIterator:
#     def __init__(self, start, end, step=1):
#         self.current = start
#         self.end = end
#         self.step = step
#
#     def __iter__(self):
#         return self
#
#     def __next__(self):
#         if self.current >= self.end:
#             raise StopIteration
#         value = self.current
#         self.current += self.step
#         return value
#
# # Beispiel f√ºr RangeIterator
# print("RangeIterator von 0 bis 5:")
# for num in RangeIterator(0, 5):
#     print(num)
"""
2. Schreiben Sie eine Funktion file_line_iterator, die einen Dateinamen annimmt 
und einen Iterator zuruÃàckgibt, der der Reihe nach die Zeilen der Datei zuruÃàckgibt. 
Verwenden Sie diesen Iterator, um alle Zeilen der Datei einzeln zu lesen und auszugeben.
---------
DE: Diese Funktion nutzt yield, um eine Datei zeilenweise zu lesen.
RU: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç yield –¥–ª—è –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
Datei wird mit open(filename) ge√∂ffnet.
RU: –§–∞–π–ª –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é open(filename).
Jede Zeile wird einzeln mit yield zur√ºckgegeben.
RU: –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ yield.
"""
# def file_line_iterator(filename):
#     with open(filename, 'r') as file:
#         for line in file:
#             yield line.strip()
#         oder: yield from (line.strip() for line in file)
#
# # Beispiel f√ºr file_line_iterator (Datei muss existieren)
# for line in file_line_iterator("beispiel.txt"):
#     print(line)
"""
3. Schreiben Sie einen Generator fibonacci, 
der die Fibonacci-Zahlenfolge bis zu einer bestimmten Anzahl von Elementen generiert. 
Testen Sie den Generator, indem Sie eine Liste der ersten 10 Fibonacci-Zahlen erstellen.
-------
DE: Wir nutzen yield, um n Fibonacci-Zahlen zu generieren.
RU: –ò—Å–ø–æ–ª—å–∑—É–µ–º yield, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å n —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏.
Start mit a = 0, b = 1.
RU: –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è a = 0, b = 1.
In jeder Schleife: yield a, dann neue Werte berechnen.
RU: –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ: –≤—ã–¥–∞—ë–º a, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º a –∏ b.
"""
# def fibonacci(n):
#     a, b = 0, 1
#     for _ in range(n):
#         yield a
#         a, b = b, a + b
#         oder: return (a := b, b := a + b)[0] for _ in range(n)
#
# # Beispiel f√ºr fibonacci
# print("Erste 10 Fibonacci-Zahlen:")
# print(list(fibonacci(10)))
"""
4. Schreiben Sie einen Generator infinite_counter, 
der eine unendliche Sequenz von natuÃàrlichen Zahlen, beginnend mit 1, generiert. 
Verwenden Sie itertools.islice, um die ersten 20 Zahlen aus dieser Sequenz zu erhalten.
------
DE: Ein Generator liefert unendlich viele nat√ºrliche Zahlen.
RU: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞—ë—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
while True: ewige Schleife, beginnt bei 1.
RU: –¶–∏–∫–ª while True ‚Äî –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1.
itertools.islice(generator, 20) extrahiert nur 20 Zahlen.
RU: itertools.islice(generator, 20) –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 20 –∑–Ω–∞—á–µ–Ω–∏–π.
üì¶ Importiert:
from itertools import islice
DE: islice erlaubt es, Teile eines unendlichen Generators zu begrenzen.
RU: islice –ø–æ–∑–≤–æ–ª—è–µ—Ç ¬´–æ–±—Ä–µ–∑–∞—Ç—å¬ª –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
"""
# from itertools import islice
#
# def infinite_counter():
#     num = 1
#     while True:
#         yield num
#         num += 1
#         
#
# # Beispiel f√ºr infinite_counter mit islice
# print("Erste 20 Zahlen vom unendlichen Z√§hler:")
# print(list(islice(infinite_counter(), 20)))
# oder:
# from itertools import islice, count
#
# def infinite_counter():
#     return count(1)
#
# # Beispiel f√ºr infinite_counter mit islice
# print("Erste 20 Zahlen vom unendlichen Z√§hler:")
# print(list(islice(infinite_counter(), 20)))

"""
5. Schreiben Sie einen Generator random_numbers, 
der zwei Parameter start und end annimmt 
und eine unendliche Sequenz von Zufallszahlen in diesem Bereich generiert. 
Verwenden Sie den Generator, um die ersten 5 Zufallszahlen zu erhalten.
-------
DE: Wir generieren endlos viele Zufallszahlen im Bereich start bis end.
RU: –ú—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç start –¥–æ end.
üì¶ Importiert:
import random
DE: random.randint(a, b) erzeugt zuf√§llige Ganzzahlen zwischen a und b.
RU: random.randint(a, b) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç a –¥–æ b.
"""
# import random
#
# def random_numbers(start, end):
#     while True:
#         yield random.randint(start, end)
#
# # Beispiel f√ºr random_numbers
# print("5 Zufallszahlen zwischen 1 und 10:")
# rng = random_numbers(1, 10)
# for _ in range(5):
#     print(next(rng))
# oder:
# import random
#
# def random_numbers(start, end):
#     return (random.randint(start, end) for _ in iter(int, 1))  # unendlicher Generator
#
# # Beispiel f√ºr random_numbers
# print("5 Zufallszahlen zwischen 1 und 10:")
# print([next(random_numbers(1, 10)) for _ in range(5)])

"""
6. Erstellen Sie einen Generator even_numbers, 
der nur gerade Zahlen aus einem gegebenen Bereich generiert. 
Testen Sie den Generator, indem Sie die geraden Zahlen von 1 bis 20 generieren und ausgeben.
------
DE: Wir iterieren √ºber eine Zahlenspanne und geben nur gerade Zahlen aus.
RU: –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –∏ –≤—ã–¥–∞—ë–º —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ.
range(start, end + 1) erzeugt die Zahlenspanne.
if number % 2 == 0: Test auf gerade Zahl.
yield number gibt sie zur√ºck.
"""
# def even_numbers(start, end):
#     for number in range(start, end + 1):
#         if number % 2 == 0:
#             yield number
#      oder: return (x for x in range(start, end + 1) if x % 2 == 0)
#
# # Beispiel f√ºr even_numbers
# print("Gerade Zahlen von 1 bis 20:")
# print(list(even_numbers(1, 20)))
"""
7. Schreiben Sie einen Generator square_numbers, 
der eine Liste von Zahlen annimmt und deren Quadrate generiert. 
Testen Sie den Generator anhand der Liste [5, 2, 7, 4, 1].
------
DE: Wir berechnen die Quadrate aller Zahlen in einer Liste.
RU: –í—ã—á–∏—Å–ª—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç—ã –≤—Å–µ—Ö —á–∏—Å–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞.
for number in numbers: Iteration durch Liste.
yield number ** 2: Quadrat wird zur√ºckgegeben.
"""
# def square_numbers(numbers):
#     for number in numbers:
#         yield number ** 2
#      oder: return map(lambda x: x ** 2, numbers)
#
# # Beispiel f√ºr square_numbers
# print("Quadrate der Zahlen [5, 2, 7, 4, 1]:")
# print(list(square_numbers([5, 2, 7, 4, 1])))
"""
8. Schreiben Sie einen Generator repeat_string, 
der eine Zeichenkette und die Anzahl der Wiederholungen annimmt 
und die Zeichenkette die angegebene Anzahl von Malen generiert. 
Testen Sie den Generator mit der Zeichenkette "Hello", die 3 Mal wiederholt wird.
-----
DE: Wir wiederholen eine Zeichenkette times-mal mit yield.
RU: –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é yield.
Schleife l√§uft times-mal.
yield string gibt die Zeichenkette zur√ºck.
"""
# def repeat_string(string, times):
#     for _ in range(times):
#         yield string
#     oder: return (string for _ in range(times))
#
# # Beispiel f√ºr repeat_string
# print("Wiederhole 'Hello' 3 Mal:")
# print(list(repeat_string("Hello", 3)))


"""
def get_integer():
    try:
        return int(input("Bitte geben Sie eine ganze Zahl ein: "))
    except ValueError:
        print("Ung√ºltige Eingabe. Bitte versuchen Sie es erneut.")
        return get_integer()

# Aufruf der Funktion
get_integer()

DE:
Die Funktion versucht, den eingegebenen Wert direkt in eine ganze Zahl umzuwandeln (int(input(...))).
Falls dies fehlschl√§gt (z.‚ÄØB. durch Buchstaben), wird der Fehler ValueError ausgel√∂st.
Dann wird eine Fehlermeldung ausgegeben und die Funktion ruft sich selbst erneut auf.
RU:
–§—É–Ω–∫—Ü–∏—è –ø—ã—Ç–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å –ø–æ–º–æ—â—å—é int(input(...)).
–ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—É–∫–≤—ã), –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ValueError.
–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∏ —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∞–º–∞ —Å–µ–±—è.
‚ùó –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
–†–µ–∫—É—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –≤ —Ç–µ–æ—Ä–∏–∏ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–µ–∫–∞ 
–ø—Ä–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–º —á–∏—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≤–≤–æ–¥–æ–≤.
–í —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å while!
"""
# def get_integer():
#     return next(
#         map(
#             lambda x: int(x),
#             iter(lambda: input("Bitte geben Sie eine ganze Zahl ein: "), None)
#         )
#     )
#
# try:
#     print(get_integer())
# except ValueError:
#     # Wiederhole die Funktion im Fehlerfall (rekursiv oder mit Schleife, je nach Wunsch)
#     print("Ung√ºltige Eingabe. Bitte versuchen Sie es erneut.")
#     get_integer()
"""
1. iter(lambda: input(...), None)
DE: Erstellt einen endlosen Iterator, der jedes Mal input() aufruft.
RU: –°–æ–∑–¥–∞—ë—Ç—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≤—ã–∑—ã–≤–∞—é—â–∏–π input() –ø—Ä–∏ –∫–∞–∂–¥–æ–º —à–∞–≥–µ.
2. map(lambda x: int(x), ...)
DE: Wendet int() auf jeden eingegebenen Wert an.
RU: –ö –∫–∞–∂–¥–æ–º—É –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è int() —Å –ø–æ–º–æ—â—å—é map().
3. next(...)
DE: Holt den ersten g√ºltigen Wert, der durch map() verarbeitet wird.
RU: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–µ—Ä–≤–æ–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
4. Fehlerbehandlung mit try/except
DE: Falls der erste Wert fehlerhaft ist (z.‚ÄØB. Buchstaben), wird ValueError ausgel√∂st.
RU: –ï—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–Ω–∏–∫–∞–µ—Ç ValueError, –∏ –º—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é.
‚ùó –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
–≠—Ç–æ –Ω–µ–º–Ω–æ–≥–æ —á–∏—Ç–µ—Ä—Å–∫–∏–π —Å–ø–æ—Å–æ–±, 
–ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ –º—ã –æ–¥–∏–Ω —Ä–∞–∑ –ª–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å–∫–∞–µ–º get_integer() ‚Äî 
–Ω–æ –≤—Å—ë –∂–µ –æ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å while –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å map –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞.

–í–æ—Ç —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ get_integer(), –≥–¥–µ:
map() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ü–∏–∫–ª,
input() –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ iter(),
–æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Å –ø–æ–≤—Ç–æ—Ä–æ–º ‚Äî –±–µ–∑ while, –Ω–æ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π.
DE: Ein unendlicher Iterator, der jedes Mal input() aufruft.
RU: –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≤—ã–∑—ã–≤–∞—é—â–∏–π input().
üß† map(safe_parse, ...)
DE: Wendet die Funktion safe_parse auf jede Eingabe an.
RU: –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é safe_parse –∫ –∫–∞–∂–¥–æ–º—É –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
üõ° safe_parse()
DE: Versucht int() umzuwandeln; gibt None zur√ºck bei Fehler, sonst die Zahl.
RU: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–≤–æ–¥ –≤ int, –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
‚úÖ if value is not None: return value
DE: Gibt das erste g√ºltige Ergebnis zur√ºck.
RU: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —É–¥–∞—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
üîÑ –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:
–ë–µ–∑ while
–° map –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä
–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
"""

# def get_integer():
#     # Funktion zum sicheren Parsen der Eingabe in eine ganze Zahl
#     # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
#     def safe_parse(x):
#         try:
#             # Versucht den Wert in eine ganze Zahl umzuwandeln
#             # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
#             return int(x)
#         except ValueError:
#             # Bei Fehler wird eine Fehlermeldung ausgegeben
#             # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
#             print("Ung√ºltige Eingabe. Bitte versuchen Sie es erneut.")
#             # Gibt None zur√ºck, wenn der Wert ung√ºltig ist
#             # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
#             return None
#
#     # map wendet safe_parse auf jeden Eingabewert an
#     # map –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é safe_parse –∫–æ –≤—Å–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
#     # iter ruft input unendlich oft auf, um die Benutzereingabe zu erhalten
#     # iter –≤—ã–∑—ã–≤–∞–µ—Ç input –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     for value in map(safe_parse, iter(lambda: input("Bitte geben Sie eine ganze Zahl ein: "), None)):
#         # Wenn ein g√ºltiger Wert gefunden wird (nicht None), wird dieser zur√ºckgegeben
#         # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ None), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
#         if value is not None:
#             return value

# Testaufruf
# –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤
# print(f"Eingegebene Zahl: {get_integer()}")

"""
–ü–æ—è—Å–Ω–µ–Ω–∏–µ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º:
safe_parse(x):
DE: Versucht, 
den Eingabewert in eine ganze Zahl zu konvertieren, gibt None zur√ºck, wenn ein Fehler auftritt.
RU: –ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
map(safe_parse, iter(...)):
DE: map wendet safe_parse auf jedes Ergebnis von input() an, bis ein g√ºltiger Wert gefunden wird.
RU: map –ø—Ä–∏–º–µ–Ω—è–µ—Ç safe_parse –∫ –∫–∞–∂–¥–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É input(), –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
iter(lambda: input(...), None):
DE: iter wird verwendet, um input() unendlich oft aufzurufen. 
Dies bedeutet, dass die Eingabe so lange abgefragt wird, bis ein g√ºltiger Wert eingegeben wird.
RU: iter –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ input(). 
–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤–≤–æ–¥ –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
for value in map(...)::
DE: Iteriert durch die Eingaben und gibt den ersten g√ºltigen Wert zur√ºck.
RU: –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
if value is not None::
DE: √úberpr√ºft, ob der Wert g√ºltig ist. Wenn ja, wird der Wert zur√ºckgegeben.
RU: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º. –ï—Å–ª–∏ –¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
"""