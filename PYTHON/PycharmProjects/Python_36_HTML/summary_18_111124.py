# -*- coding: utf-8 -*-
"""Summary_18_111124.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WrPQ0wiIPbQ4PSR-Vjr3DpqTal9C13R8

## Python fundamentals: Домашнее задание 34 (Python)

### 0
"""

pattern = r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"
text = "Contact us at info@example.com or support@example.com for assistance. support@example.qwe.com"

# pip install email-validator
from email_validator import validate_email, EmailNotValidError

try:
    valid = validate_email("support@example.com")
    # valid = validate_email("support@gmail.com")
    print(valid.normalized)
except EmailNotValidError as e:
    print("Invalid:", e)

"""### 1.
Напишите функцию extract_emails(text), которая извлекает все адреса электронной почты из заданного текста и возвращает их в виде списка.


Пример использования:


text = "Contact us at info@example.com or support@example.com for assistance."


emails = extract_emails(text)

print(emails)  # Вывод: ['info@example.com', 'support@example.com']
"""

import re

def extract_emails(text):
    pattern = r"\w+@\w+\.\w+"
    return re.findall(pattern, text)

text = "Contact us at info@example.com or support@example.com for assistance."
emails = extract_emails(text)
print(emails)  # Вывод: ['info@example.com', 'support@example.com']

import re
# creating function for finding and returning emails
def extract_emails(message):
    return re.findall(r'[\w.-]+@[\w.-]+', message)
text = "Contact us at info@example.com or support@example.com for assistance."
emails = extract_emails(text)
print(f'Founded emails: {emails}')

import re


def extract_emails(string):
    pattern = r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9._+-]+\.[a-zA-Z]+"
    result = re.findall(pattern, string)
    return result


text = "Contact us at gu.in%fo+za-zaz@example.ru.com or support@example.com for assistance."
emails = extract_emails(text)

print(emails)

import re

def extract_emails(text):
    emails = re.findall(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+', text)
    return emails

text = "Contact us at info@example.com or support@example.com for assistance"
emails = extract_emails(text)
print(emails)

def extract_emails(string) :
    pattern_email = r'[\w.]{1,64}@[\w.]{1,190}(?!\S)'
    return re.findall(pattern_email,string)

text = "Contact us at info@example.com or support@example.com for assistance."
emails = extract_emails(text)
print(emails)

"""### 2.
Напишите функцию highlight_keywords(text, keywords), которая выделяет все вхождения заданных ключевых слов в тексте, окружая их символами *. Функция должна быть регистронезависимой при поиске ключевых слов.


Пример использования:


text = "This is a sample text. We need to highlight Python and programming."


keywords = ["python", "programming"]

highlighted_text = highlight_keywords(text, keywords)

print(highlighted_text)

Вывод: "This is a sample text. We need to highlight *Python* and *programming*."


"""

def highlight_keywords(text, keywords):
    pattern = r'\b(' + '|'.join(map(re.escape, keywords)) + r')\b'
    return re.sub(
        pattern,
        lambda m: f"*{m.group()}*",
        text,
        flags=re.IGNORECASE)



text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]
highlighted_text = highlight_keywords(text, keywords)
print(highlighted_text) # Вывод: "This is a sample text. We need to highlight *Python* and *programming*."

import re
# creating a function to search for words and insert asterisks around them
def highlight_keywords(message, format):
    # calling each word from list
    for word in format:
        # creating pattern to find word in general text
        pattern = r'\b' + re.escape(word) + r'\b'
        # replacing match with the highlighted word
        message = re.sub(pattern, r'*\g<0>*', message, flags=re.IGNORECASE)
    return message


text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]
highlighted_text = highlight_keywords(text, keywords)
print(highlighted_text) # result: This is a sample text. We need to highlight *Python* and *programming*.

"""-----"""

import re

def highlight_keywords(text, keywords):
    # Преобразуем текст в нижний регистр для регистронезависимости
    for keyword in keywords:
        # Создаем шаблон для поиска ключевого слова в тексте, игнорируя регистр
        pattern = re.compile(re.escape(keyword), re.IGNORECASE)
        # Заменяем все вхождения ключевого слова на то же самое слово, окруженное *
        text = pattern.sub(lambda match: f"*{match.group(0)}*", text)
    return text

# Пример использования:
text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]
highlighted_text = highlight_keywords(text, keywords)
print(highlighted_text)

import re


def highlight_keywords(string, list_words):
    for word in list_words:
        string = re.sub(r"\b" + word + r"\b", "*" + word + "*", string, flags=re.IGNORECASE)
    return string


text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]

highlighted_text = highlight_keywords(text, keywords)
print(highlighted_text)

import re

def highlight_keywords(text, keywords):
    for key in keywords:
        text = re.sub(r'(' + key + r')', r'*\1*', text, flags=re.IGNORECASE)
    return text

text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]

result = highlight_keywords(text, keywords)
print(result)

import re

def highlight_keywords(text, keywords):
    pattern = re.compile('|'.join(map(re.escape, keywords)), re.IGNORECASE)
    highlighted_text = pattern.sub(lambda match: f'*{match.group(0)}*', text)

    return highlighted_text

text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]

highlighted_text = highlight_keywords(text, keywords)
print(highlighted_text)

# same
import re

def highlight_keywords(text, keywords):
    pattern = '|'.join(map(re.escape, keywords))
    highlighted_text = re.sub(pattern, lambda match: f'*{match.group(0)}*', text, re.IGNORECASE)

    return highlighted_text

text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]

highlighted_text = highlight_keywords(text, keywords)
print(highlighted_text)

def highlight_keywords(text, keywords):
    pattern = r'(' + '|'.join(re.escape(word) for word in keywords) + r')'
    print(pattern)
    highlighted_text = re.sub(pattern, r'*\1*', text, flags=re.IGNORECASE)
    return highlighted_text



text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]
highlighted_text = highlight_keywords(text, keywords)
print(highlighted_text)

def highlight_keywords(string: str, keyword: list[str]) -> str:
    new_text = string
    for word in keyword :
        new_text = re.sub(rf"({word})", r'*\1*', new_text, flags=re.IGNORECASE)
    return new_text

text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]
print(highlight_keywords(text,keywords))

import re

def highlight_keywords(e_text, e_keywords):
    result = ""
    for word in e_text.split():
        if bla := re.findall(r"\b" + word.lower() + r"+", str(e_keywords)):
            result += f"*{word}* "
        else:
            result += f"{word} "

    return result.strip()


text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]
highlighted_text = highlight_keywords(text, keywords)
print(highlighted_text)

import re

def highlight_keywords(text, keywords):
    for keyword in keywords:
        text = re.sub(rf"\b({keyword})\b", r"*\1*", text, flags=re.I)
    return text

text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]

print(highlight_keywords(text, keywords))

# +++++++++++++
import re
# +++++++++++++


def highlight_keywords(text, keywords):
    pattern = re.compile(r'\b(' + '|'.join(word for word in keywords) + r')\b', re.IGNORECASE)
    hghltd_txt = re.sub(pattern, r'*\1*', text)
    return hghltd_txt

text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]
highlighted_text = highlight_keywords(text, keywords)
print(highlighted_text)

import re

text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]

def highlight_word(word):
    return f"\033[48;5;208m\033[38;5;0m{word}\033[0m"


pattern = re.compile(r'(' + '|'.join(keywords) + r')', re.IGNORECASE)
highlighted_text = pattern.sub(lambda m: highlight_word(m.group(0)), text)
print(highlighted_text)

"""-----"""

# teacher
import re

def highlight_keywords(text, keywords):
    for word in keywords:
        pattern = rf'\b({word})\b'  # r'\b(python)\b'
        text = re.sub(pattern, r'*\1*', text, flags=re.IGNORECASE)  # '*\1*' = '*python*' = '*Python*'
    return text

text = "This is a sample text. We need to highlight Python and programming."
keywords = ["python", "programming"]
print(highlight_keywords(text, keywords))

# teacher
import re

def highlight_keywords(text, keywords):
    for word in keywords:
        pattern = rf'\b({word})\b (\w+)'  # r'\b(python)\b'
        text = re.sub(pattern, r'-\2- *\1*', text, flags=re.IGNORECASE)  # '*\1*' = '*python*' = '*Python*'
    return text

text = "This is a sample text. We need to highlight Python and programming cxdg."
keywords = ["python", "programming"]
print(highlight_keywords(text, keywords))

import re

text = "Dates: 03.06.2025, 05/02/2024"
# yyyy-mm-dd

pattern = r'.+: (\d{2})[./-](\d{2})[./-](\d{4})'
matches = re.findall(pattern, text)
print(matches)
new_text = re.sub(pattern, r'\3-\2-\1', text)
print(new_text)

"""## Python fundamentals: Домашнее задание 35 (Python)

### 1.
Напишите функцию get_response(url), которая отправляет GET-запрос по заданному URL-адресу и возвращает объект ответа. Затем выведите следующую информацию об ответе:

- Код состояния (status code)

- Текст ответа (response text)

- Заголовки ответа (response headers)


Пример использования:


url = "https://api.example.com"

response = get_response(url)


print("Status Code:", response.status_code)

print("Response Text:", response.text)

print("Response Headers:", response.headers)
"""

import requests

def get_response(url):
    return requests.get(url)

url = "https://example.com/"
response = get_response(url)
print("Status Code:", response.status_code)
print("Response Text:", response.text)
print("Response Headers:", response.headers)

import requests
# creating function get response
def get_response(url):
    request = requests.get(url)
    return request
# taking any url for checking
# url = "https://api.example.com"
url = 'http://youtube.com'
response = get_response(url)
# showing / printing result for given url
print(f'Status code: \n{response.status_code}\n')
print(f'Response text: \n{response.text}\n')
print(f'Response headers: \n{response.headers}\n')

import requests


def get_response(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        print(f"Status Code: {response.status_code}\n")
        print(f"Response Text:\n\n{response.text[:300]}\n")
        print("Response Headers:\n")
        for key, value in response.headers.items():
            print(f"{key}: {value}")

        return response

    except requests.RequestException as e:
        print(f"Error while executing the request: {e}")
        return None

url = "https://lms.itcareerhub.de/course/view.php?id=103"
get_response(url)

"""### 2.
Напишите функцию find_common_words(url_list), которая принимает список URL-адресов и возвращает список наиболее часто встречающихся слов на веб-страницах. Для каждого URL-адреса функция должна получить содержимое страницы с помощью запроса GET и использовать регулярные выражения для извлечения слов. Затем функция должна подсчитать количество вхождений каждого слова и вернуть наиболее часто встречающиеся слова в порядке убывания частоты.


"""

from collections import Counter
import re
def find_common_words(url_list):
    word_counter = Counter()
    for url in url_list:
        response = requests.get(url)
        content = response.text
        words = re.findall(r"\w+", content.lower())
        word_counter.update(words)
    return word_counter.most_common(10)


url_list = ("https://google.com", "https://amazon.com", "https://samsung.com", "https://apple.com")
most_common_words = find_common_words(url_list)
for word, count in most_common_words:
    print(f"{word} встречается {count} раз")

import requests
import re
from collections import Counter


# creating function find_common_words
def find_common_words(url_list):
    # creating dictionary for most common words
    most_common_words = {}
    # looking for words and letters and counting them
    for url in url_list:
        data_get = requests.get(url)
        search_words = re.findall(r'[a-zA-Z]+', data_get.text)
        words_counter = Counter(search_words)
        most_common_words[url] = words_counter.most_common(3)
    # returning result
    return most_common_words


# adding some url´s for checking
site_list = ['https://youtube.com', 'https://google.com', 'https://facebook.com']
result = find_common_words(site_list)
for urls, values in result.items():
    print(f'Three most common words / letters for "{urls}" are: {values}')

import requests
import re
from collections import Counter

def find_common_words(url_list):
    words = []
    for url in url_list:
        response = requests.get(url)
        text = response.text
        for line in text.splitlines():
            result = re.findall(r'\w+', line.lower(), re.IGNORECASE)
            for word in result:
                words.append(word)

    return Counter(words).most_common(20)

url_s = ["https://example.com", "https://youtube.com", "https://www.instagram.com"]
common_words = find_common_words(url_s)

print("Результат максимального количества слов:")
for word_res, count in common_words:

    print([f"{word_res} : {count}"])

import requests
import re
from collections import Counter

def find_common_words(url_list):
    word_count = Counter()  # счетчик для слов

    for url in url_list:
            response = requests.get(url)
            text = response.text

            words = re.findall(r'\b\w+\b', text, flags=re.I)  # поиск слов
            word_count.update(words)  # добавляем слова в счетчик

    return word_count.most_common()  # возвращаем количество вхождений слов

urls = [
    "https://example.com",
    "https://habr.com"
]
common_words = find_common_words(urls)
for word, count in common_words[:10]:  # Выводим первые 10 слов
    print(f"{word}: {count}")

import requests
import re
from collections import Counter


def find_common_words(url_list):
    if not url_list:
        raise ValueError('No URL given')

    all_words = []

    for url in url_list:
        try:
            response = requests.get(url)
            response.raise_for_status()
            text = response.text
            words = re.findall(r'\b[A-Za-zА-Яа-яЕё]{2,}\b', text.lower())
            all_words.extend(words)
        except requests.RequestException as e:
            print(f'Error during processing {url}: {e}')

    words_count = Counter(all_words)
    return words_count.most_common()

result=find_common_words(url_list=['https://lms.itcareerhub.de/course/view.php?id=103'])
for i in result:
     print(f'{i[0]:<25}: {i[1]}')