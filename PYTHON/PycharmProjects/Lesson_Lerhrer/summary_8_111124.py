# -*- coding: utf-8 -*-
"""Summary_8_111124.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SZJshvo4vA9mV5G9e7UPDLxcOhL8jvWk

## Общее:
- без скринов как решение
- текстом, а не файлом
- следить за табами
- внимательно к условию (например "написать функцию")
- оставляйте данные для тестирования
- не используем основные не изученные темы

## Python fundamentals: Домашнее задание 15 (Python)

### 1.
Напишите функцию, которая принимает список кортежей от пользователя, где каждый кортеж содержит информацию о студенте (имя, возраст, средний балл). Программа должна вывести на экран имена студентов, чей средний балл выше заданного значения. Используйте методы кортежей и циклы для обработки данных.Выведите итоговый список на экран с помощью команды print.


Пример списка кортежей:

[("Alice", 20, 90), ("Bob", 19, 80), ("Charlie", 21, 95), ("David", 18, 85)]


Пример вывода:


Введите пороговое значение среднего балла: 90

Студенты с средним баллом выше 90 : ['Charlie']
"""

def find_students(students, mark):
  result_student = []

  for tup in students:
    if tup[2] > avg_mark:
      result_student.append(tup[0])
  return result_student



tup_list = [("Alice", 20, 90), ("Bob", 19, 80), ("Charlie", 21, 95), ("David", 18, 85)]
avg_mark = int(input("Please enter the average mark for the student: "))
result = find_students(tup_list, avg_mark)
print(f"Students with average mark higher than {avg_mark}: {result}")

students_list = [("Alice", 20, 90), ("Bob", 19, 80), ("Charlie", 21, 95), ("David", 18, 85)]
user_input = float(input("Enter the threshold value of the average mark: "))


def stud_avgmark(students_list, mark):
    stud_aboveavgmark = [student[0] for student in students_list if student[2] > mark]
    # print([student[0] for student in students_list])

    # stud_aboveavgmark = []
    # for student in students_list:
    #   if student[2] > mark:
    #     stud_aboveavgmark.append(student[0])

    print(f'Students with above average marks: {stud_aboveavgmark}')

stud_avgmark(students_list, user_input)

def test_students(bal): # функция принимающая данные от пользователя и проверяет уровень среднего бала
    students = []            # переменная для хранения списка
    while True:              # цикл пока значение не будет прерванно
        user_input = input("Введите имя, возраст, средний балл студента через пробел ('stop' для конца ввода): ")
        if user_input == '':   # если введено в нижнем регистре stop, то стоп цикла
            break
        name, age, note = user_input.split()  # разбивает строку на подстроки ([0] [1] [2]
        students.append((name, int(age), float(note)))  # каждой итерацией добавляем кортеж в конец списка

    bal_students = []            # создаем переменную для хранения списка
    for student in students:  # циклом перебираем последовательно
        if student[2] > bal:      # если среднее значение баллов больше введённого предела
            bal_students.append(student[0])  # добавляем в конец списка

    print(f"Список кортежей{students}\nСтуденты с средним баллом выше {bal}: {bal_students}")


bal = int(input('Введите пороговое значение среднего балла: ')) # принимаем пороговое значение балла
test_students(bal) # вызываем функцию

import ast
chitalka = input("Введите список кортежей \n")

sr = input("Введите пороговое значение среднего балла: ")

print(f"Студенты с средним баллом выше {sr}: ")
chitalka = ast.literal_eval(chitalka)
print(type(chitalka))

for name, age, bal in chitalka:
    if bal > int(sr):
        print(f'[\"{name}\"]')


# chitalka = input("Введите текст\n").split()
# res = []
# for word in chitalka:
#     res.append(len(word))
# print(res)

def calculate_the_average_score(students, average_score):
    student_name = []
    for char in students:
        if char[2] > average_score:
            student_name.append(char[0])
        # else:
            # print("Введите коректные данные")
    print(f'Студенты с средним баллом выше {average_score} : {student_name}')
    return student_name
students = [("Alice", 20, 90), ("Bob", 19, 80), ("Charlie", 21, 95), ("David", 18, 85)]
average_score = int(input("Введите пороговое значение среднего балла: "))


calculate_the_average_score(students, average_score)

def print_best_list(stds_list, limit_value):
    names = []
    for n in stds_list:
        if n[2] >= limit_value:
            names.append(n[0])
    print(f'Пороговое значение среднего балла: \033[33m{limit_value}\033[m.'
                 f'\nСтуденты со средним баллом выше \033[31m{limit_value}\033[m: {names}.')

students_list = [("Alice", 20, 90), ("Bob", 19, 80), ("Charlie", 21, 95), ("David", 18, 85)]
limit_value = 90
print_best_list(students_list, limit_value)

"""### Преобразование"""

data_str = '[("Alice", 20, 90), ("Bob", 19, 80), ("Charlie", 21, 95), ("David", 18, 85)]'
data = eval(data_str)
print(data)

"""### 2.
Напишите программу, которая принимает строку от пользователя и разбивает ее на отдельные слова. 
Затем программа должна создать новый кортеж, содержащий длину каждого слова в исходной строке. 
Используйте методы строк и кортежей для обработки данных.


Пример вывода:


Введите предложение: Программирование это интересно и полезно

Длины слов в предложении: (15, 3, 8, 2, 6)
"""

def process_string(text):
  result=[]
  formatted_text = text.strip().replace('.', "").replace(',', "").split()
  for word in formatted_text:
    result.append(len(word))
  return tuple(result)


phrase = input("Enter a phrase: ")
print(f"The length of the words in a phrase: {process_string(phrase)}")

user_string = input("Enter a string: ")


def separated_strings(user_string):
    cleaned_string = user_string.replace('.','').replace(',','').replace('-','').replace('!','').split()
    len_words = tuple([len(word) for word in cleaned_string])
    print(len_words)

separated_strings(user_string)

text = input("Введите предложение: ").split()
list_numbers = []
for word in text:
    if word.isalpha():
        list_numbers.append(len(word))
    else:
        print(f'Не корректный ввод: {word}')
tuple_numbers = tuple(list_numbers)
print(f'Длины слов в предложении: {tuple_numbers}')

"""## Python fundamentals: Домашнее задание 16 (Python)

### 1.
Напишите программу, которая принимает матрицу (вложенный список) 
от пользователя и находит сумму всех элементов в матрице. 
Используйте вложенные списки и циклы для обхода элементов матрицы.



Пример матрицы: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]


Пример вывода:


Сумма элементов в матрице: 45
"""

matrix = [[1,2,3], [4,5,6], [7,8,9]]

def sum_matrix(matrix):
    total = 0
    for row in matrix:
        for num in row:
            # num = int(num)
            total += num
    return total
    # return f'The sum of all numbers into the matrix is {total}.'

print(f'The sum of all numbers into the matrix is {sum_matrix(matrix)}.')

total_list = []   # создаем переменную для списка

while True:       # цикл запрашивающий ввод переменных

    numbers = input('Введите три числа через пробел или стоп для остановки: ')
    if numbers.lower() == 'стоп':
        break
    num2 = list(map(int, numbers.split()))
    total_list.append(num2)

a = 0             # создадим переменную для сохранения нового числа после цикла for
for num in total_list:  # последовательно перебираем список из матриц
    for i in num:       # последовательно перебираем матрицу
        a = a + i

print(f'Список из матриц: {total_list}')
print(f'Сумма элементов в матрице: {a}')

# __ 1-st Variant __ Python __
m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
def sum_matrx_elms(matrix):
    sum_all = []
    for el in matrix:
        a = sum(el)
        sum_all.append(a)
    return sum(sum_all)

print(f'Sum of elements in a matrix: {sum_matrx_elms(m)}.')

print('Задание №1')
usr_inp1 = [1,2,3]
usr_inp2 = [4,5,6]
usr_inp3 = [7,8,9]
matrix = [usr_inp1, usr_inp2, usr_inp3] # добавление списков в матрицу
print('\nВведённая матрица:', matrix)
ns = []
for l in matrix:
    sum(l)
    ns.append(sum(l))
print(f'\nСумма элементов в матрице: {sum(ns)}')

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

def sum_matrix(matrix):
    elements = [num for row in matrix for num in row]
    print(elements)
    return sum(elements)

print(f'Сумма элементов в матрице: {sum_matrix(matrix)}')

"""### 2.
Напишите программу, которая принимает список чисел от пользователя и сортирует его в порядке убывания, используя метод sort() и параметр reverse=True. Выведите отсортированный список на экран.


Пример вывода:


Введите список чисел, разделенных пробелами: 5 2 8 1 3

Отсортированный список чисел: [8, 5, 3, 2, 1]
"""

def sort_list(user_numbers):
    user_numbers.sort(reverse=True)


# user_numbers = []
# user_input = input("Enter a list numbers by one and 'stop' for exit:").lower()
# while True:
#     user_input = input("Enter a list numbers by one and 'stop' for exit:").lower()
#     if user_input == 'stop':
#         break
#     else:
#         user_input = int(user_input)
#         user_numbers.append(user_input)

user_numbers = [4, 7, 3, 1, 5]

sort_list(user_numbers)
print(f'Your sorted list of numbers: {user_numbers}')

numbers_list = list(map(int, input("Введите список чисел, разделенных пробелами: ").split()))
numbers_list.sort(reverse=True) # методом sort сортируем по возростанию. аргументом reverse=True делаем реверс списка
print(f'Отсортированный список чисел: {numbers_list}')



list_num = []
total_num = int(input('Введите желаемое колличество чисел в списке: '))
for i in range(total_num):
    num = int(input('Введите число: '))
    list_num.append(num)

list_num.sort(reverse=True) # методом sort сортируем по возростанию. аргументом reverse=True делаем реверс списка
result = list(list_num)
print(f'Отсортированный список чисел: {result}')

def input_numb_list():
    list_user_numbers = input('Enter a list of numbers separated by space: ').split()
    print(list_user_numbers)
    numb_list = [int(x) for x in list_user_numbers]
    return numb_list

l1 = input_numb_list()
print(l1)

def sorting(some_list):
    some_list.sort(reverse=True)

sorting(l1)
print(f'Sorted list of numbers: {l1}.')