# 1. –ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä validate_args,
# –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–∏–ø—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ,
# –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞.
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–∏–ø—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# @validate_args(int, str)
# def greet(age, name):
#     print(f"–ü—Ä–∏–≤–µ—Ç, {name}! –¢–µ–±–µ {age} –ª–µ—Ç.")
#
# greet(25, "–ê–Ω–Ω–∞")  # –í—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
# greet("25", "–ê–Ω–Ω–∞")  # –í–æ–∑–Ω–∏–∫–Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ TypeError
# –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥:
# –ü—Ä–∏–≤–µ—Ç, –ê–Ω–Ω–∞! –¢–µ–±–µ 25 –ª–µ—Ç.
# TypeError: –ê—Ä–≥—É–º–µ–Ω—Ç 25 –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø <class 'str'>. –û–∂–∏–¥–∞–µ—Ç—Å—è <class 'int'>.

# print("üòäüî•üíª")  # üòäüî•üíª
# print("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üöÄ")
# print( "üëç", 'üòÑ')


# def validate_args(*typenames):
#     def decorator(func):
#         def wrapper(*args, **kwargs):
#             cnt = 0
#             for i, c_type in zip(args, typenames):
#                 try:
#                     if not isinstance(i, c_type):
#                         cnt += 1
#                         raise TypeError(f'–ê—Ä–≥—É–º–µ–Ω—Ç {i} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø \033[31m{type(i)}\033[0m.'
#                                         f'–û–∂–∏–¥–∞–µ—Ç—Å—è \033[34m{c_type}\033[0m.')
#                 except TypeError as e:
#                         print(e)
#             if cnt == 0:
#                 return func(*args, **kwargs)
#         return wrapper
#     return decorator
#
# @validate_args(int, str, str, int, float)
# def greet(age, name, city, height, weight):
#     print(f"–ü—Ä–∏–≤–µ—Ç, {name}!\n"
#           f"–¢–µ–±–µ {age} –ª–µ—Ç.\n"
#           f"–¢—ã –∏–∑ –≥–æ—Ä–æ–¥–∞: {city}.\n"
#           f"–¢–≤–æ–π —Ä–æ—Å—Ç: {height} —Å–º.\n"
#           f"–¢–≤–æ–π –≤–µ—Å: {weight} –∫–≥.\n"
#           f"–¢—ã –≤ —Ö–æ—Ä–æ—à–µ–π —Ñ–æ—Ä–º–µ!üòä")
#
# greet(25, "–ê–Ω–Ω–∞", "London", 170, 63.5)
# print('-----------------')
# greet('25', "–ê–Ω–Ω–∞", 23, 120, 100)

# 2. –ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä log_args,
# –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª.
# –ö–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ê—Ä–≥—É–º–µ–Ω—Ç—ã: <–∞—Ä–≥—É–º–µ–Ω—Ç—ã>,
# –†–µ–∑—É–ª—å—Ç–∞—Ç: <—Ä–µ–∑—É–ª—å—Ç–∞—Ç>". –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å logging –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª.
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# @log_args
# def add(a, b):
#     return a + b
#
# add(2, 3)
# add(5, 7)
# –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª–µ log.txt:
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã: 2, 3, –†–µ–∑—É–ª—å—Ç–∞—Ç: 5
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã: 5, 7, –†–µ–∑—É–ª—å—Ç–∞—Ç: 12
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∫–æ–¥–∞ —É –≤–∞—Å —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª log.txt –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏,
# –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç Python.

# def log_args(func):
#     def wrapper(*args, **kwargs):
#         with open("log.txt", 'w') as f:
#             result = func(*args, **kwargs)
#             f.write(f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args}, {kwargs} –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
#         with open(f"log.txt", 'r') as f:
#             print(f.read())
#     return wrapper
#
# @log_args
# def add(a, b):
#     return a + b
#
# add(2, 3)
# add(a=5, b=7)

# GPT
# import logging
# # import functools
#
# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
# logging.basicConfig(
#     filename="log.txt",      # –§–∞–π–ª, –∫—É–¥–∞ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –ª–æ–≥–∏
#     level=logging.INFO,      # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (INFO ‚Äì —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
#     format="%(asctime)s - %(message)s",  # –§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ (–≤–∫–ª—é—á–∞–µ—Ç –¥–∞—Ç—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)
#     encoding="utf-8"         # –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏)
# )
# def log_args(func):
#     # @functools.wraps(func)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
#     def wrapper(*args, **kwargs):
#         result = func(*args, **kwargs)  # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
#         args_str = ", ".join(map(str, args)) if args else "–Ω–µ—Ç"
#         kwargs_str = ", ".join(f"{k}={v}" for k, v in kwargs.items()) if kwargs else "–Ω–µ—Ç"
#         log_message = f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args_str}, kwargs: {kwargs_str}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
#         logging.info(log_message)
#         return result
#     return wrapper
#
#
# @log_args
# def add(a, b):
#     return a + b
#
# # –¢–µ—Å—Ç–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã
# add(2, 3)
# add(a=5, b=7)