11:02:23 –û—Ç Hanna Kulykovska –¥–æ –í—Å–µ:
	–ù–∞–º –Ω—É–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–µ–º—å –∫—Ä–∞—Å–Ω—ã—Ö –ª–∏–Ω–∏–π. –í—Å–µ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã, –∏ –∫—Ä–æ–º–µ —Ç–æ–≥–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º, –∞ –µ—â–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ ‚Äî –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º.
	Darina Trotskaya:üòÇ
	
11:10:50 –û—Ç Olha Dvornyk –¥–æ –í—Å–µ:
	–ß—Ç–æ-—Ç–æ –±–ª–∏–∂–µ –∫ –¥–æ–º–∞—à–∫–µ, —á—Ç–æ–±—ã –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ –≥–æ–ª–æ–≤–µ –∑–∞–∫—Ä–µ–ø–∏–ª–æ—Å—å.
	Darina Trotskaya:‚ûï
	
11:12:48 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	# –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä `frame`, –∫–æ—Ç–æ—Ä—ã–π **–æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–º–∫–æ–π** –∏–∑ 50 —Å–∏–º–≤–æ–ª–æ–≤ `-`, –≤—ã–≤–æ–¥—è **–ø–æ —Å—Ç—Ä–æ–∫–µ –¥–æ –∏ –ø–æ—Å–ª–µ** –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏. 
	
	
11:12:55 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	--------------------------------------------------
	–ü—Ä–∏–≤–µ—Ç, –∏–≥—Ä–æ–∫!
	--------------------------------------------------
	
11:22:56 –û—Ç Oleksandr Kiselov –¥–æ –í—Å–µ:
	–ö—Å—Ç–∞—Ç–∏, —è —É–∂–µ –≥–æ—Ç–æ–≤, —á—Ç–æ–±—ã –º–µ–Ω—è –≤—ã–∑–≤–∞–ª–∏
	
11:29:58 –û—Ç Oleksandr Kiselov –¥–æ –í—Å–µ:
	def frame(func):
	    def wrapper(num):
	        print('-' * num)
	        func()
	        print('-' * num)
	    return wrapper
	
	@frame
	def say_hello():
	    print(f"–ü—Ä–∏–≤–µ—Ç, player!")
	
	say_hello(20)
	say_hello(10)
	
11:32:41 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	def frame(line_num):
	    def decorator(function):
	        def wrapper(*args, **kwargs):
	            print('-' * line_num)
	            function(*args, **kwargs)
	            print('-' * line_num)
	        return wrapper
	    return decorator
	
	@frame(50)
	def say_hello(player):
	    print(f"–ü—Ä–∏–≤–µ—Ç, {player}!")
	
	@frame(70)
	def say_bye():
	    print("–ü–æ–∫–∞, –∏–≥—Ä–æ–∫!")
	
	say_hello("–∏–≥—Ä–æ–∫")
	say_bye()
	Olha Dvornyk:üëç
	
11:34:33 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å.
	
	
11:45:47 –û—Ç Darina Trotskaya –¥–æ –í—Å–µ:
	–°–∫–∏–Ω—å —Ä–µ—à–µ–Ω–∏–µ
	
11:45:58 –û—Ç Oleksandr Kiselov –¥–æ –í—Å–µ:
	import time
	
	def timer(func):
	    def wrapper(*args, **kwargs):
	        start = time.time()
	        res = func(*args, **kwargs)
	        end = time.time()
	        print(end - start, func.__name__)
	        return res
	    return wrapper
	
	@timer
	def sona(dauer):
	    time.sleep(dauer)
	
	@timer
	def massiv(dauer):
	    arr = list(range(dauer))
	    return arr
	
	print(massiv(50000000))
	
11:46:16 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	–°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä `retry`, –∫–æ—Ç–æ—Ä—ã–π **–ø–æ–≤—Ç–æ—Ä—è–µ—Ç** –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É. 
	
	Olha Dvornyk:üòÅ
	
11:48:46 –û—Ç Hanna Kulykovska –¥–æ –í—Å–µ:
	–ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–≤–æ–µ–º—É –æ–±—ä—è—Å–Ω–µ–Ω–∏—é üòè
	
11:49:28 –û—Ç Teacher 23 Teacher 23 –¥–æ –í—Å–µ:
	—Å–ø–∞—Å–∏–±–æ)
	
12:07:00 –û—Ç Hanna Kulykovska –¥–æ –í—Å–µ:
	Screenshot2025_03_24_120656.jpg
	Olha Dvornyk, Oleksii Starodubov:üòÅ
	
12:13:25 –û—Ç Stanislav M. –¥–æ –í—Å–µ:
	—è –≤–æ—Ç —ç—Ç–æ —Ö–æ—Ç–µ–ª —Å–ø—Ä–æ—Å–∏—Ç—å, –∫–∞–∫ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ/–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã:
	myfunc_with_decorator = decorator(myfunc)
	result = myfunc_with_decorator(500)
	print(result)
	
	
	myfunc_with_param_decorator = param_decorator(1)(myfunc)
	result = myfunc_with_param_decorator(500)
	print(result)
	
12:15:22 –û—Ç Oleksii Starodubov –¥–æ –í—Å–µ:
	import time
	def retry(func):
	    def wrapper(*args, **kwargs):
	        for i in range(5):
	            try:
	                return func(*args, **kwargs)
	            except Exception as e:
	                print(f"Try Nr.{i+1}: {e}")
	                time.sleep(5)
	    return wrapper
	
	@retry
	def read_file(file_name):
	    with open(file_name, "r") as file:
	        return file.read()
	
	print(read_file("path_to_file"))
	import time
	def retry(wait_time, exec_times):
	    def decorator(func):
	        def wrapper(*args, **kwargs):
	            for i in range(exec_times):
	                try:
	                    return func(*args, **kwargs)
	                except Exception as e:
	                    print(f"Try Nr.{i+1}: {e}")
	                    time.sleep(wait_time)
	        return wrapper
	    return decorator
	
	@retry(5, 7)
	def read_file(file_name):
	    with open(file_name, "r") as file:
	        return file.read()
	
	print(read_file("path_to_file"))
	
